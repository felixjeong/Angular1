{"version":3,"file":"router.js","sources":["../../../../packages/router/src/version.ts","../../../../packages/router/src/router_module.ts","../../../../packages/router/src/router_preloader.ts","../../../../packages/router/src/route_reuse_strategy.ts","../../../../packages/router/src/directives/router_outlet.ts","../../../../packages/router/src/directives/router_link_active.ts","../../../../packages/router/src/directives/router_link.ts","../../../../packages/router/src/router.ts","../../../../packages/router/src/url_handling_strategy.ts","../../../../packages/router/src/router_outlet_map.ts","../../../../packages/router/src/recognize.ts","../../../../packages/router/src/create_url_tree.ts","../../../../packages/router/src/create_router_state.ts","../../../../packages/router/src/router_state.ts","../../../../packages/router/src/utils/tree.ts","../../../../packages/router/src/config.ts","../../../../packages/router/src/apply_redirects.ts","../../../../packages/router/src/url_tree.ts","../../../../packages/router/src/router_config_loader.ts","../../../../packages/router/src/utils/collection.ts","../../../../packages/router/src/shared.ts","../../../../packages/router/src/events.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @stable\n */\nexport const /** @type {?} */ VERSION = new Version('4.0.0-rc.3-992aa17');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BASE_HREF, HashLocationStrategy, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation} from '@angular/common';\nimport {ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, ComponentRef, Inject, Injectable, InjectionToken, Injector, ModuleWithProviders, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, Provider, SkipSelf, SystemJsNgModuleLoader} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {of } from 'rxjs/observable/of';\n\nimport {Route, Routes} from './config';\nimport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ErrorHandler, Router} from './router';\nimport {ROUTES} from './router_config_loader';\nimport {RouterOutletMap} from './router_outlet_map';\nimport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {ActivatedRoute, RouterStateSnapshot} from './router_state';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {DefaultUrlSerializer, UrlSerializer} from './url_tree';\nimport {flatten} from './utils/collection';\n\n\n\n/**\n * @whatItDoes Contains a list of directives\n * @stable\n */\nconst /** @type {?} */ ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\n\n/**\n * @whatItDoes Is used in DI to configure the router.\n * @stable\n */\nexport const /** @type {?} */ ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>('ROUTER_CONFIGURATION');\n\n/**\n * @docsNotRequired\n */\nexport const /** @type {?} */ ROUTER_FORROOT_GUARD = new InjectionToken<void>('ROUTER_FORROOT_GUARD');\n\nexport const /** @type {?} */ ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  {\n    provide: Router,\n    useFactory: setupRouter,\n    deps: [\n      ApplicationRef, UrlSerializer, RouterOutletMap, Location, Injector, NgModuleFactoryLoader,\n      Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\n      [RouteReuseStrategy, new Optional()]\n    ]\n  },\n  RouterOutletMap,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  {provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader},\n  RouterPreloader,\n  NoPreloading,\n  PreloadAllModules,\n  {provide: ROUTER_CONFIGURATION, useValue: {enableTracing: false}},\n];\n/**\n * @return {?}\n */\nexport function routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n/**\n * \\@whatItDoes Adds router directives and providers.\n * \n * \\@howToUse \n * \n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n * \n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n * \n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n * \n * When registered at the root, the module should be used as follows\n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * For submodules and lazy loaded submodules the module should be used as follows:\n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * \\@description \n * \n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n * \n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n * \n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n * \n * \\@stable\n */\nexport class RouterModule {\n/**\n * @param {?} guard\n * @param {?} router\n */\nconstructor(  guard: any,  router: Router) {}\n/**\n * Creates a module with all the router providers and directives. It also optionally sets up an\n * application listener to perform an initial navigation.\n * \n * Options:\n * * `enableTracing` makes the router log all its internal events to the console.\n * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n * API.\n * * `initialNavigation` disables the initial navigation.\n * * `errorHandler` provides a custom error handler.\n * @param {?} routes\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        provideRoutes(routes),\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        {\n          provide: LocationStrategy,\n          useFactory: provideLocationStrategy,\n          deps: [\n            PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n          ]\n        },\n        {\n          provide: PreloadingStrategy,\n          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                                                             NoPreloading\n        },\n        {provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken},\n        provideRouterInitializer(),\n      ],\n    };\n  }\n/**\n * Creates a module with all the router directives and a provider registering routes.\n * @param {?} routes\n * @return {?}\n */\nstatic forChild(routes: Routes): ModuleWithProviders {\n    return {ngModule: RouterModule, providers: [provideRoutes(routes)]};\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD, ] }, ]},\n{type: Router, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction RouterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterModule.ctorParameters;\n}\n\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nexport function provideLocationStrategy(\n    platformLocationStrategy: PlatformLocation, baseHref: string, options: ExtraOptions = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n                           new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function provideForRootGuard(router: Router): any {\n  if (router) {\n    throw new Error(\n        `RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n/**\n * \\@whatItDoes Registers routes.\n * \n * \\@howToUse \n * \n * ```\n * \\@NgModule({ \n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n * \n * \\@stable\n * @param {?} routes\n * @return {?}\n */\nexport function provideRoutes(routes: Routes): any {\n  return [\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes},\n    {provide: ROUTES, multi: true, useValue: routes},\n  ];\n}\n\n/**\n * @whatItDoes Represents an option to configure when the initial navigation is performed.\n *\n * @description\n * * 'enabled' - the initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete.\n * * 'disabled' - the initial navigation is not performed. The location listener is set up before\n * the root component gets created.\n * * 'legacy_enabled'- the initial navigation starts after the root component has been created.\n * The bootstrap is not blocked until the initial navigation is complete. @deprecated\n * * 'legacy_disabled'- the initial navigation is not performed. The location listener is set up\n * after @deprecated\n * the root component gets created.\n * * `true` - same as 'legacy_enabled'. @deprecated\n * * `false` - same as 'legacy_disabled'. @deprecated\n *\n * The 'enabled' option should be used for applications unless there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic. In this case, 'disabled' should be used.\n *\n * The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.\n *\n * @experimental\n */\nexport type InitialNavigation =\n    true | false | 'enabled' | 'disabled' | 'legacy_enabled' | 'legacy_disabled';\n\n/**\n * @whatItDoes Represents options to configure the router.\n *\n * @stable\n */\nexport interface ExtraOptions {\n  /**\n   * Makes the router log all its internal events to the console.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * Enables the location strategy that uses the URL fragment instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * Disables the initial navigation.\n   */\n  initialNavigation?: InitialNavigation;\n\n  /**\n   * A custom error handler.\n   */\n  errorHandler?: ErrorHandler;\n\n  /**\n   * Configures a preloading strategy. See {@link PreloadAllModules}.\n   */\n  preloadingStrategy?: any;\n}\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} outletMap\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nexport function setupRouter(\n    ref: ApplicationRef, urlSerializer: UrlSerializer, outletMap: RouterOutletMap,\n    location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler,\n    config: Route[][], opts: ExtraOptions = {}, urlHandlingStrategy?: UrlHandlingStrategy,\n    routeReuseStrategy?: RouteReuseStrategy) {\n  const /** @type {?} */ router = new Router(\n      null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.enableTracing) {\n    const /** @type {?} */ dom = getDOM();\n    router.events.subscribe(e => {\n      dom.logGroup(`Router Event: ${( /** @type {?} */((<any>e.constructor))).name}`);\n      dom.log(e.toString());\n      dom.log(e);\n      dom.logGroupEnd();\n    });\n  }\n\n  return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n/**\n * To initialize the router properly we need to do in two steps:\n * \n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n * \n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nexport class RouterInitializer {\nprivate initNavigation: boolean = false;\nprivate resultOfPreactivationDone = new Subject<void>();\n/**\n * @param {?} injector\n */\nconstructor(private injector: Injector) {}\n/**\n * @return {?}\n */\nappInitializer(): Promise<any> {\n    const /** @type {?} */ p: Promise<any> = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    return p.then(() => {\n      let /** @type {?} */ resolve: Function = null;\n      const /** @type {?} */ res = new Promise(r => resolve = r);\n      const /** @type {?} */ router = this.injector.get(Router);\n      const /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\n\n      if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'disabled') {\n        router.setUpLocationChangeListener();\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'enabled') {\n        router.hooks.afterPreactivation = () => {\n          // only the initial navigation should be delayed\n          if (!this.initNavigation) {\n            this.initNavigation = true;\n            resolve(true);\n            return this.resultOfPreactivationDone;\n\n            // subsequent navigations should not be delayed\n          } else {\n            return of (null);\n          }\n        };\n        router.initialNavigation();\n\n      } else {\n        throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n      }\n\n      return res;\n    });\n  }\n/**\n * @param {?} bootstrappedComponentRef\n * @return {?}\n */\nbootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void {\n    const /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\n    const /** @type {?} */ preloader = this.injector.get(RouterPreloader);\n    const /** @type {?} */ router = this.injector.get(Router);\n    const /** @type {?} */ ref = this.injector.get(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    if (this.isLegacyEnabled(opts)) {\n      router.initialNavigation();\n    } else if (this.isLegacyDisabled(opts)) {\n      router.setUpLocationChangeListener();\n    }\n\n    preloader.setUpPreloading();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    this.resultOfPreactivationDone.next(null);\n    this.resultOfPreactivationDone.complete();\n  }\n/**\n * @param {?} opts\n * @return {?}\n */\nprivate isLegacyEnabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n        opts.initialNavigation === undefined;\n  }\n/**\n * @param {?} opts\n * @return {?}\n */\nprivate isLegacyDisabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction RouterInitializer_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterInitializer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterInitializer.ctorParameters;\n/** @type {?} */\nRouterInitializer.prototype.initNavigation;\n/** @type {?} */\nRouterInitializer.prototype.resultOfPreactivationDone;\n/** @type {?} */\nRouterInitializer.prototype.injector;\n}\n\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getAppInitializer(r: RouterInitializer) {\n  return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function getBootstrapListener(r: RouterInitializer) {\n  return r.bootstrapListener.bind(r);\n}\n\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * @experimental\n */\nexport const /** @type {?} */ ROUTER_INITIALIZER =\n    new InjectionToken<(compRef: ComponentRef<any>) => void>('Router Initializer');\n/**\n * @return {?}\n */\nexport function provideRouterInitializer() {\n  return [\n    RouterInitializer,\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: getAppInitializer,\n      deps: [RouterInitializer]\n    },\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer]},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {filter} from 'rxjs/operator/filter';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {Route, Routes} from './config';\nimport {NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart} from './events';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n/**\n * \\@whatItDoes Provides a preloading strategy.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class PreloadingStrategy {\n/**\n * @abstract\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>) {}\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.\n * \n * \\@howToUse \n * \n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n * \n * \\@experimental\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return _catch.call(fn(), () => of (null));\n  }\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n * \n * \\@description \n * \n * This strategy is enabled by default.\n * \n * \\@experimental\n */\nexport class NoPreloading implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> { return of (null); }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n * \n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n * \n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n * \n * \\@stable\n */\nexport class RouterPreloader {\nprivate loader: RouterConfigLoader;\nprivate subscription: Subscription;\n/**\n * @param {?} router\n * @param {?} moduleLoader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} preloadingStrategy\n */\nconstructor(\nprivate router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\nprivate injector: Injector,\nprivate preloadingStrategy: PreloadingStrategy) {\n    const onStartLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadStart(r));\n    const onEndLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n  };\n/**\n * @return {?}\n */\nsetUpPreloading(): void {\n    const /** @type {?} */ navigations = filter.call(this.router.events, (e: any) => e instanceof NavigationEnd);\n    this.subscription = concatMap.call(navigations, () => this.preload()).subscribe(() => {});\n  }\n/**\n * @return {?}\n */\npreload(): Observable<any> {\n    const /** @type {?} */ ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.subscription.unsubscribe(); }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @return {?}\n */\nprivate processRoutes(ngModule: NgModuleRef<any>, routes: Routes): Observable<void> {\n    const /** @type {?} */ res: Observable<any>[] = [];\n    for (const /** @type {?} */ c of routes) {\n      // we already have the config loaded, just recurse\n      if (c.loadChildren && !c.canLoad && ( /** @type {?} */((<any>c)))._loadedConfig) {\n        const /** @type {?} */ childConfig = ( /** @type {?} */((<any>c)))._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (c.loadChildren && !c.canLoad) {\n        res.push(this.preloadConfig(ngModule, c));\n\n        // recurse into children\n      } else if (c.children) {\n        res.push(this.processRoutes(ngModule, c.children));\n      }\n    }\n    return mergeAll.call(from(res));\n  }\n/**\n * @param {?} ngModule\n * @param {?} route\n * @return {?}\n */\nprivate preloadConfig(ngModule: NgModuleRef<any>, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const /** @type {?} */ loaded = this.loader.load(ngModule.injector, route);\n      return mergeMap.call(loaded, (config: any): any => {\n        const /** @type {?} */ c: any = route;\n        c._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      });\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: NgModuleFactoryLoader, },\n{type: Compiler, },\n{type: Injector, },\n{type: PreloadingStrategy, },\n];\n}\n\nfunction RouterPreloader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterPreloader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterPreloader.ctorParameters;\n/** @type {?} */\nRouterPreloader.prototype.loader;\n/** @type {?} */\nRouterPreloader.prototype.subscription;\n/** @type {?} */\nRouterPreloader.prototype.router;\n/** @type {?} */\nRouterPreloader.prototype.injector;\n/** @type {?} */\nRouterPreloader.prototype.preloadingStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\n\nimport {ActivatedRoute, ActivatedRouteSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\n/**\n * @whatItDoes Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @experimental\n */\nexport type DetachedRouteHandle = {};\n\n/** @internal */\nexport type DetachedRouteHandleInternal = {\n  componentRef: ComponentRef<any>,\n  route: TreeNode<ActivatedRoute>,\n};\n/**\n * \\@whatItDoes Provides a way to customize when activated routes get reused.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class RouteReuseStrategy {\n/**\n * Determines if this route (and its subtree) should be detached to be reused later\n * @abstract\n * @param {?} route\n * @return {?}\n */\nshouldDetach(route: ActivatedRouteSnapshot) {}\n/**\n * Stores the detached route\n * @abstract\n * @param {?} route\n * @param {?} handle\n * @return {?}\n */\nstore(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle) {}\n/**\n * Determines if this route (and its subtree) should be reattached\n * @abstract\n * @param {?} route\n * @return {?}\n */\nshouldAttach(route: ActivatedRouteSnapshot) {}\n/**\n * Retrieves the previously stored route\n * @abstract\n * @param {?} route\n * @return {?}\n */\nretrieve(route: ActivatedRouteSnapshot) {}\n/**\n * Determines if a route should be reused\n * @abstract\n * @param {?} future\n * @param {?} curr\n * @return {?}\n */\nshouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot) {}\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Injector, OnDestroy, Output, ReflectiveInjector, ResolvedReflectiveProvider, ViewContainerRef} from '@angular/core';\nimport {RouterOutletMap} from '../router_outlet_map';\nimport {ActivatedRoute} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n/**\n * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\n * state.\n * \n * \\@howToUse \n * \n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n * \n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n * \n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterOutlet implements OnDestroy {\nprivate activated: ComponentRef<any>;\nprivate _activatedRoute: ActivatedRoute;\npublic outletMap: RouterOutletMap;\n\n   activateEvents = new EventEmitter<any>();\n   deactivateEvents = new EventEmitter<any>();\n/**\n * @param {?} parentOutletMap\n * @param {?} location\n * @param {?} resolver\n * @param {?} name\n */\nconstructor(\nprivate parentOutletMap: RouterOutletMap,\nprivate location: ViewContainerRef,\nprivate resolver: ComponentFactoryResolver,\nprivate name: string) {\n    parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET); }\n/**\n * @deprecated since v4 *\n * @return {?}\n */\nget locationInjector(): Injector { return this.location.injector; }\n/**\n * @deprecated since v4 *\n * @return {?}\n */\nget locationFactoryResolver(): ComponentFactoryResolver { return this.resolver; }\n/**\n * @return {?}\n */\nget isActivated(): boolean { return !!this.activated; }\n/**\n * @return {?}\n */\nget component(): Object {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this.activated.instance;\n  }\n/**\n * @return {?}\n */\nget activatedRoute(): ActivatedRoute {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this._activatedRoute;\n  }\n/**\n * @return {?}\n */\ndetach(): ComponentRef<any> {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    this.location.detach();\n    const /** @type {?} */ r = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    return r;\n  }\n/**\n * @param {?} ref\n * @param {?} activatedRoute\n * @return {?}\n */\nattach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n  }\n/**\n * @return {?}\n */\ndeactivate(): void {\n    if (this.activated) {\n      const /** @type {?} */ c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n/**\n * @deprecated since v4, use {\\@link activateWith}\n * @param {?} activatedRoute\n * @param {?} resolver\n * @param {?} injector\n * @param {?} providers\n * @param {?} outletMap\n * @return {?}\n */\nactivate(\n      activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver, injector: Injector,\n      providers: ResolvedReflectiveProvider[], outletMap: RouterOutletMap): void {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n\n    this.outletMap = outletMap;\n    this._activatedRoute = activatedRoute;\n\n    const /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n    const /** @type {?} */ component: any = /** @type {?} */(( <any>snapshot._routeConfig.component));\n    const /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n\n    const /** @type {?} */ inj = ReflectiveInjector.fromResolvedProviders(providers, injector);\n\n    this.activated = this.location.createComponent(factory, this.location.length, inj, []);\n    this.activated.changeDetectorRef.detectChanges();\n\n    this.activateEvents.emit(this.activated.instance);\n  }\n/**\n * @param {?} activatedRoute\n * @param {?} resolver\n * @param {?} outletMap\n * @return {?}\n */\nactivateWith(\n      activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null,\n      outletMap: RouterOutletMap) {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n\n    this.outletMap = outletMap;\n    this._activatedRoute = activatedRoute;\n\n    const /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\n    const /** @type {?} */ component = /** @type {?} */(( <any>snapshot._routeConfig.component));\n\n    resolver = resolver || this.resolver;\n    const /** @type {?} */ factory = resolver.resolveComponentFactory(component);\n\n    const /** @type {?} */ injector = new OutletInjector(activatedRoute, outletMap, this.location.injector);\n\n    this.activated = this.location.createComponent(factory, this.location.length, injector, []);\n    this.activated.changeDetectorRef.detectChanges();\n\n    this.activateEvents.emit(this.activated.instance);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'router-outlet'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RouterOutletMap, },\n{type: ViewContainerRef, },\n{type: ComponentFactoryResolver, },\n{type: undefined, decorators: [{ type: Attribute, args: ['name', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activateEvents': [{ type: Output, args: ['activate', ] },],\n'deactivateEvents': [{ type: Output, args: ['deactivate', ] },],\n};\n}\n\nfunction RouterOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterOutlet.ctorParameters;\n/** @type {?} */\nRouterOutlet.propDecorators;\n/** @type {?} */\nRouterOutlet.prototype.activated;\n/** @type {?} */\nRouterOutlet.prototype._activatedRoute;\n/** @type {?} */\nRouterOutlet.prototype.outletMap;\n/** @type {?} */\nRouterOutlet.prototype.activateEvents;\n/** @type {?} */\nRouterOutlet.prototype.deactivateEvents;\n/** @type {?} */\nRouterOutlet.prototype.parentOutletMap;\n/** @type {?} */\nRouterOutlet.prototype.location;\n/** @type {?} */\nRouterOutlet.prototype.resolver;\n/** @type {?} */\nRouterOutlet.prototype.name;\n}\n\nclass OutletInjector implements Injector {\n/**\n * @param {?} route\n * @param {?} map\n * @param {?} parent\n */\nconstructor(\nprivate route: ActivatedRoute,\nprivate map: RouterOutletMap,\nprivate parent: Injector) {}\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === RouterOutletMap) {\n      return this.map;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n}\n\nfunction OutletInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nOutletInjector.prototype.route;\n/** @type {?} */\nOutletInjector.prototype.map;\n/** @type {?} */\nOutletInjector.prototype.parent;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, ElementRef, Input, OnChanges, OnDestroy, QueryList, Renderer, SimpleChanges} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {RouterLink, RouterLinkWithHref} from './router_link';\n/**\n * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\n * \n * \\@howToUse \n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n * \n * \\@description \n * \n * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\n * becomes active.\n * \n * Consider the following example:\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n * \n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n * \n * You can set more than one class, as follows:\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n * \n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n * \n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n * \n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n * \n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n * \n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n * \n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterLinkActive implements OnChanges,\n    OnDestroy, AfterContentInit {\n   links: QueryList<RouterLink>;\n  \n  linksWithHrefs: QueryList<RouterLinkWithHref>;\nprivate classes: string[] = [];\nprivate subscription: Subscription;\nprivate active: boolean = false;\n\n   routerLinkActiveOptions: {exact: boolean} = {exact: false};\n/**\n * @param {?} router\n * @param {?} element\n * @param {?} renderer\n * @param {?} cdr\n */\nconstructor(\nprivate router: Router,\nprivate element: ElementRef,\nprivate renderer: Renderer,\nprivate cdr: ChangeDetectorRef) {\n    this.subscription = router.events.subscribe(s => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nget isActive(): boolean { return this.active; }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this.links.changes.subscribe(_ => this.update());\n    this.linksWithHrefs.changes.subscribe(_ => this.update());\n    this.update();\n  }\n/**\n * @param {?} data\n * @return {?}\n */\nset routerLinkActive(data: string[]|string) {\n    const /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter(c => !!c);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void { this.update(); }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.subscription.unsubscribe(); }\n/**\n * @return {?}\n */\nprivate update(): void {\n    if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;\n    const /** @type {?} */ hasActiveLinks = this.hasActiveLinks();\n\n    // react only when status has changed to prevent unnecessary dom updates\n    if (this.active !== hasActiveLinks) {\n      this.active = hasActiveLinks;\n      this.classes.forEach(\n          c => this.renderer.setElementClass(this.element.nativeElement, c, hasActiveLinks));\n      this.cdr.detectChanges();\n    }\n  }\n/**\n * @param {?} router\n * @return {?}\n */\nprivate isLinkActive(router: Router): (link: (RouterLink|RouterLinkWithHref)) => boolean {\n    return (link: RouterLink | RouterLinkWithHref) =>\n               router.isActive(link.urlTree, this.routerLinkActiveOptions.exact);\n  }\n/**\n * @return {?}\n */\nprivate hasActiveLinks(): boolean {\n    return this.links.some(this.isLinkActive(this.router)) ||\n        this.linksWithHrefs.some(this.isLinkActive(this.router));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[routerLinkActive]',\n  exportAs: 'routerLinkActive',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: ElementRef, },\n{type: Renderer, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'links': [{ type: ContentChildren, args: [RouterLink, {descendants: true}, ] },],\n'linksWithHrefs': [{ type: ContentChildren, args: [RouterLinkWithHref, {descendants: true}, ] },],\n'routerLinkActiveOptions': [{ type: Input },],\n'routerLinkActive': [{ type: Input },],\n};\n}\n\nfunction RouterLinkActive_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLinkActive.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLinkActive.ctorParameters;\n/** @type {?} */\nRouterLinkActive.propDecorators;\n/** @type {?} */\nRouterLinkActive.prototype.links;\n/** @type {?} */\nRouterLinkActive.prototype.linksWithHrefs;\n/** @type {?} */\nRouterLinkActive.prototype.classes;\n/** @type {?} */\nRouterLinkActive.prototype.subscription;\n/** @type {?} */\nRouterLinkActive.prototype.active;\n/** @type {?} */\nRouterLinkActive.prototype.routerLinkActiveOptions;\n/** @type {?} */\nRouterLinkActive.prototype.router;\n/** @type {?} */\nRouterLinkActive.prototype.element;\n/** @type {?} */\nRouterLinkActive.prototype.renderer;\n/** @type {?} */\nRouterLinkActive.prototype.cdr;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {Attribute, Directive, ElementRef, HostBinding, HostListener, Input, OnChanges, OnDestroy, Renderer, isDevMode} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {QueryParamsHandling} from '../config';\nimport {NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {ActivatedRoute} from '../router_state';\nimport {UrlTree} from '../url_tree';\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n * \n * \\@howToUse \n * \n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`\n * \n * When linking to this `user/:name` route, you can write:\n * `<a routerLink='/user/bob'>link to user component</a>`\n * \n * \\@description \n * \n * The RouterLink directives let you link to specific parts of your app.\n * \n * When the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n * \n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n * \n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n * \n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n * \n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n * \n * You can set query params and fragment as follows:\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n * \n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n * \n * You can tell the directive to how to handle queryParams, available options are:\n *  - 'merge' merge the queryParams into the current queryParams\n *  - 'preserve' prserve the current queryParams\n *  - default / '' use the queryParams only\n *  same options for {\\@link NavigationExtras.queryParamsHandling}\n * \n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n * \n * The router link directive always treats the provided input as a delta to the current url.\n * \n * For instance, if the current url is `/user/(box//aux:team)`.\n * \n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n * \n * \\@ngModule RouterModule\n * \n * See {\\@link Router.createUrlTree} for more information.\n * \n * \\@stable\n */\nexport class RouterLink {\n   queryParams: {[k: string]: any};\n   fragment: string;\n   queryParamsHandling: QueryParamsHandling;\n   preserveFragment: boolean;\n   skipLocationChange: boolean;\n   replaceUrl: boolean;\nprivate commands: any[] = [];\nprivate preserve: boolean;\n/**\n * @param {?} router\n * @param {?} route\n * @param {?} tabIndex\n * @param {?} renderer\n * @param {?} el\n */\nconstructor(\nprivate router: Router,\nprivate route: ActivatedRoute,\n       tabIndex: string, renderer: Renderer, el: ElementRef) {\n    if (tabIndex == null) {\n      renderer.setElementAttribute(el.nativeElement, 'tabindex', '0');\n    }\n  }\n/**\n * @param {?} commands\n * @return {?}\n */\nset routerLink(commands: any[]|string) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n/**\n * @deprecated 4.0.0 use `queryParamsHandling` instead.\n * @param {?} value\n * @return {?}\n */\nset preserveQueryParams(value: boolean) {\n    if (isDevMode() && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n    }\n    this.preserve = value;\n  }\n/**\n * @return {?}\n */\nonClick(): boolean {\n    const /** @type {?} */ extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return true;\n  }\n/**\n * @return {?}\n */\nget urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: ':not(a)[routerLink]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: ActivatedRoute, },\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'queryParams': [{ type: Input },],\n'fragment': [{ type: Input },],\n'queryParamsHandling': [{ type: Input },],\n'preserveFragment': [{ type: Input },],\n'skipLocationChange': [{ type: Input },],\n'replaceUrl': [{ type: Input },],\n'routerLink': [{ type: Input },],\n'preserveQueryParams': [{ type: Input },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction RouterLink_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLink.ctorParameters;\n/** @type {?} */\nRouterLink.propDecorators;\n/** @type {?} */\nRouterLink.prototype.queryParams;\n/** @type {?} */\nRouterLink.prototype.fragment;\n/** @type {?} */\nRouterLink.prototype.queryParamsHandling;\n/** @type {?} */\nRouterLink.prototype.preserveFragment;\n/** @type {?} */\nRouterLink.prototype.skipLocationChange;\n/** @type {?} */\nRouterLink.prototype.replaceUrl;\n/** @type {?} */\nRouterLink.prototype.commands;\n/** @type {?} */\nRouterLink.prototype.preserve;\n/** @type {?} */\nRouterLink.prototype.router;\n/** @type {?} */\nRouterLink.prototype.route;\n}\n\n/**\n * \\@whatItDoes Lets you link to specific parts of your app.\n * \n * See {\\@link RouterLink} for more information.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class RouterLinkWithHref implements OnChanges, OnDestroy {\n    target: string;\n   queryParams: {[k: string]: any};\n   fragment: string;\n   queryParamsHandling: QueryParamsHandling;\n   preserveFragment: boolean;\n   skipLocationChange: boolean;\n   replaceUrl: boolean;\nprivate commands: any[] = [];\nprivate subscription: Subscription;\nprivate preserve: boolean;\n\n  // the url displayed on the anchor element.\n   href: string;\n/**\n * @param {?} router\n * @param {?} route\n * @param {?} locationStrategy\n */\nconstructor(\nprivate router: Router,\nprivate route: ActivatedRoute,\nprivate locationStrategy: LocationStrategy) {\n    this.subscription = router.events.subscribe(s => {\n      if (s instanceof NavigationEnd) {\n        this.updateTargetUrlAndHref();\n      }\n    });\n  }\n/**\n * @param {?} commands\n * @return {?}\n */\nset routerLink(commands: any[]|string) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset preserveQueryParams(value: boolean) {\n    if (isDevMode() && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    this.preserve = value;\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: {}): any { this.updateTargetUrlAndHref(); }\n/**\n * @return {?}\n */\nngOnDestroy(): any { this.subscription.unsubscribe(); }\n/**\n * @param {?} button\n * @param {?} ctrlKey\n * @param {?} metaKey\n * @return {?}\n */\nonClick(button: number, ctrlKey: boolean, metaKey: boolean): boolean {\n    if (button !== 0 || ctrlKey || metaKey) {\n      return true;\n    }\n\n    if (typeof this.target === 'string' && this.target != '_self') {\n      return true;\n    }\n\n    const /** @type {?} */ extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return false;\n  }\n/**\n * @return {?}\n */\nprivate updateTargetUrlAndHref(): void {\n    this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n  }\n/**\n * @return {?}\n */\nget urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'a[routerLink]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: ActivatedRoute, },\n{type: LocationStrategy, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'target': [{ type: HostBinding, args: ['attr.target', ] },{ type: Input },],\n'queryParams': [{ type: Input },],\n'fragment': [{ type: Input },],\n'queryParamsHandling': [{ type: Input },],\n'preserveFragment': [{ type: Input },],\n'skipLocationChange': [{ type: Input },],\n'replaceUrl': [{ type: Input },],\n'href': [{ type: HostBinding },],\n'routerLink': [{ type: Input },],\n'preserveQueryParams': [{ type: Input },],\n'onClick': [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'], ] },],\n};\n}\n\nfunction RouterLinkWithHref_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterLinkWithHref.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterLinkWithHref.ctorParameters;\n/** @type {?} */\nRouterLinkWithHref.propDecorators;\n/** @type {?} */\nRouterLinkWithHref.prototype.target;\n/** @type {?} */\nRouterLinkWithHref.prototype.queryParams;\n/** @type {?} */\nRouterLinkWithHref.prototype.fragment;\n/** @type {?} */\nRouterLinkWithHref.prototype.queryParamsHandling;\n/** @type {?} */\nRouterLinkWithHref.prototype.preserveFragment;\n/** @type {?} */\nRouterLinkWithHref.prototype.skipLocationChange;\n/** @type {?} */\nRouterLinkWithHref.prototype.replaceUrl;\n/** @type {?} */\nRouterLinkWithHref.prototype.commands;\n/** @type {?} */\nRouterLinkWithHref.prototype.subscription;\n/** @type {?} */\nRouterLinkWithHref.prototype.preserve;\n/** @type {?} */\nRouterLinkWithHref.prototype.href;\n/** @type {?} */\nRouterLinkWithHref.prototype.router;\n/** @type {?} */\nRouterLinkWithHref.prototype.route;\n/** @type {?} */\nRouterLinkWithHref.prototype.locationStrategy;\n}\n\n/**\n * @param {?} s\n * @return {?}\n */\nfunction attrBoolValue(s: any): boolean {\n  return s === '' || !!s;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {Compiler, Injector, NgModuleFactoryLoader, NgModuleRef, Type, isDevMode} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {every} from 'rxjs/operator/every';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {reduce} from 'rxjs/operator/reduce';\n\nimport {applyRedirects} from './apply_redirects';\nimport {QueryParamsHandling, ResolveData, Route, Routes, RunGuardsAndResolvers, validateConfig} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {Event, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized} from './events';\nimport {recognize} from './recognize';\nimport {DetachedRouteHandle, DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {RouterOutletMap} from './router_outlet_map';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, advanceActivatedRoute, createEmptyState, equalParamsAndUrlSegments, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, Params, isNavigationCancelingError} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {UrlSerializer, UrlTree, containsTree, createEmptyUrlTree} from './url_tree';\nimport {andObservables, forEach, merge, shallowEqual, waitForMap, wrapIntoObservable} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\ndeclare let Zone: any;\n\n/**\n * @whatItDoes Represents the extra options used during navigation.\n *\n * @stable\n */\nexport interface NavigationExtras {\n  /**\n  * Enables relative navigation from the current ActivatedRoute.\n  *\n  * Configuration:\n  *\n  * ```\n  * [{\n  *   path: 'parent',\n  *   component: ParentComponent,\n  *   children: [{\n  *     path: 'list',\n  *     component: ListComponent\n  *   },{\n  *     path: 'child',\n  *     component: ChildComponent\n  *   }]\n  * }]\n  * ```\n  *\n  * Navigate to list route from child route:\n  *\n  * ```\n  *  @Component({...})\n  *  class ChildComponent {\n  *    constructor(private router: Router, private route: ActivatedRoute) {}\n  *\n  *    go() {\n  *      this.router.navigate(['../list'], { relativeTo: this.route });\n  *    }\n  *  }\n  * ```\n  */\n  relativeTo?: ActivatedRoute;\n\n  /**\n  * Sets query parameters to the URL.\n  *\n  * ```\n  * // Navigate to /results?page=1\n  * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n  * ```\n  */\n  queryParams?: Params;\n\n  /**\n  * Sets the hash fragment for the URL.\n  *\n  * ```\n  * // Navigate to /results#top\n  * this.router.navigate(['/results'], { fragment: 'top' });\n  * ```\n  */\n  fragment?: string;\n\n  /**\n  * Preserves the query parameters for the next navigation.\n  *\n  * deprecated, use `queryParamsHandling` instead\n  *\n  * ```\n  * // Preserve query params from /results?page=1 to /view?page=1\n  * this.router.navigate(['/view'], { preserveQueryParams: true });\n  * ```\n  *\n  * @deprecated\n  */\n  preserveQueryParams?: boolean;\n\n  /**\n  *  config strategy to handle the query parameters for the next navigation.\n  *\n  * ```\n  * // from /results?page=1 to /view?page=1&page=2\n  * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n  * ```\n  */\n  queryParamsHandling?: QueryParamsHandling;\n  /**\n  * Preserves the fragment for the next navigation\n  *\n  * ```\n  * // Preserve fragment from /results#top to /view#top\n  * this.router.navigate(['/view'], { preserveFragment: true });\n  * ```\n  */\n  preserveFragment?: boolean;\n  /**\n  * Navigates without pushing a new state into history.\n  *\n  * ```\n  * // Navigate silently to /view\n  * this.router.navigate(['/view'], { skipLocationChange: true });\n  * ```\n  */\n  skipLocationChange?: boolean;\n  /**\n  * Navigates while replacing the current state in history.\n  *\n  * ```\n  * // Navigate to /view\n  * this.router.navigate(['/view'], { replaceUrl: true });\n  * ```\n  */\n  replaceUrl?: boolean;\n}\n\n/**\n * @whatItDoes Error handler that is invoked when a navigation errors.\n *\n * @description\n * If the handler returns a value, the navigation promise will be resolved with this value.\n * If the handler throws an exception, the navigation promise will be rejected with\n * the exception.\n *\n * @stable\n */\nexport type ErrorHandler = (error: any) => any;\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\ntype NavigationSource = 'imperative' | 'popstate' | 'hashchange';\n\ntype NavigationParams = {\n  id: number,\n  rawUrl: UrlTree,\n  extras: NavigationExtras,\n  resolve: any,\n  reject: any,\n  promise: Promise<boolean>,\n  source: NavigationSource,\n};\n\n/**\n * @internal\n */\nexport type RouterHook = (snapshot: RouterStateSnapshot) => Observable<void>;\n/**\n * \\@internal\n * @param {?} snapshot\n * @return {?}\n */\nfunction defaultRouterHook(snapshot: RouterStateSnapshot): Observable<void> {\n  return of (null);\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport class DefaultRouteReuseStrategy implements RouteReuseStrategy {\n/**\n * @param {?} route\n * @return {?}\n */\nshouldDetach(route: ActivatedRouteSnapshot): boolean { return false; }\n/**\n * @param {?} route\n * @param {?} detachedTree\n * @return {?}\n */\nstore(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void {}\n/**\n * @param {?} route\n * @return {?}\n */\nshouldAttach(route: ActivatedRouteSnapshot): boolean { return false; }\n/**\n * @param {?} route\n * @return {?}\n */\nretrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle { return null; }\n/**\n * @param {?} future\n * @param {?} curr\n * @return {?}\n */\nshouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n/**\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\n * \n * See {\\@link Routes} for more details and examples.\n * \n * \\@ngModule RouterModule\n * \n * \\@stable\n */\nexport class Router {\nprivate currentUrlTree: UrlTree;\nprivate rawUrlTree: UrlTree;\nprivate navigations = new BehaviorSubject<NavigationParams>(null);\nprivate routerEvents = new Subject<Event>();\nprivate currentRouterState: RouterState;\nprivate locationSubscription: Subscription;\nprivate navigationId: number = 0;\nprivate configLoader: RouterConfigLoader;\nprivate ngModule: NgModuleRef<any>;\n\n  /**\n   * Error handler that is invoked when a navigation errors.\n   *\n   * See {@link ErrorHandler} for more information.\n   */\n  errorHandler: ErrorHandler = defaultErrorHandler;\n\n\n\n  /**\n   * Indicates if at least one navigation happened.\n   */\n  navigated: boolean = false;\n/**\n * Used by RouterModule. This allows us to\n * pause the navigation either before preactivation or after it.\n * \\@internal\n */\nhooks: {beforePreactivation: RouterHook, afterPreactivation: RouterHook} = {\n    beforePreactivation: defaultRouterHook,\n    afterPreactivation: defaultRouterHook\n  };\n\n  /**\n   * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n   */\n  urlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n/**\n * @param {?} rootComponentType\n * @param {?} urlSerializer\n * @param {?} outletMap\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n */\nconstructor(\nprivate rootComponentType: Type<any>,\nprivate urlSerializer: UrlSerializer,\nprivate outletMap: RouterOutletMap,\nprivate location: Location, injector: Injector,\n      loader: NgModuleFactoryLoader, compiler: Compiler,\npublic config: Routes) {\n    const onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n    this.processNavigations();\n  }\n/**\n * \\@internal \n * TODO: this should be removed once the constructor of the router made internal\n * @param {?} rootComponentType\n * @return {?}\n */\nresetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.currentRouterState.root.component = this.rootComponentType;\n  }\n/**\n * Sets up the location change listener and performs the initial navigation.\n * @return {?}\n */\ninitialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n/**\n * Sets up the location change listener.\n * @return {?}\n */\nsetUpLocationChangeListener(): void {\n    // Zone.current.wrap is needed because of the issue with RxJS scheduler,\n    // which does not work properly with zone.js in IE and Safari\n    if (!this.locationSubscription) {\n      this.locationSubscription = /** @type {?} */(( <any>this.location.subscribe(Zone.current.wrap((change: any) => {\n        const /** @type {?} */ rawUrlTree = this.urlSerializer.parse(change['url']);\n        const /** @type {?} */ source: NavigationSource = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n        setTimeout(() => { this.scheduleNavigation(rawUrlTree, source, {replaceUrl: true}); }, 0);\n      }))));\n    }\n  }\n/**\n * The current route state\n * @return {?}\n */\nget routerState(): RouterState { return this.currentRouterState; }\n/**\n * The current url\n * @return {?}\n */\nget url(): string { return this.serializeUrl(this.currentUrlTree); }\n/**\n * An observable of router events\n * @return {?}\n */\nget events(): Observable<Event> { return this.routerEvents; }\n/**\n * \\@internal\n * @param {?} e\n * @return {?}\n */\ntriggerEvent(e: Event) { this.routerEvents.next(e); }\n/**\n * Resets the configuration used for navigation and generating links.\n * \n * ### Usage\n * \n * ```\n * router.resetConfig([\n *  { path: 'team/:id', component: TeamCmp, children: [\n *    { path: 'simple', component: SimpleCmp },\n *    { path: 'user/:name', component: UserCmp }\n *  ]}\n * ]);\n * ```\n * @param {?} config\n * @return {?}\n */\nresetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config;\n  }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\nngOnDestroy() { this.dispose(); }\n/**\n * Disposes of the router\n * @return {?}\n */\ndispose(): void {\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = null;\n    }\n  }\n/**\n * Applies an array of commands to the current url tree and creates a new url tree.\n * \n * When given an activate route, applies the given commands starting from the route.\n * When not given a route, applies the given command starting from the root.\n * \n * ### Usage\n * \n * ```\n * // create /team/33/user/11\n * router.createUrlTree(['/team', 33, 'user', 11]);\n * \n * // create /team/33;expand=true/user/11\n * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n * \n * // you can collapse static segments like this (this works only with the first passed-in value):\n * router.createUrlTree(['/team/33/user', userId]);\n * \n * // If the first segment can contain slashes, and you do not want the router to split it, you\n * // can do the following:\n * \n * router.createUrlTree([{segmentPath: '/one/two'}]);\n * \n * // create /team/33/(user/11//right:chat)\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n * \n * // remove the right secondary node\n * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n * \n * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n * \n * // navigate to /team/33/user/11/details\n * router.createUrlTree(['details'], {relativeTo: route});\n * \n * // navigate to /team/33/user/22\n * router.createUrlTree(['../22'], {relativeTo: route});\n * \n * // navigate to /team/44/user/22\n * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n * ```\n * @param {?} commands\n * @param {?=} __1\n * @return {?}\n */\ncreateUrlTree(\n      commands: any[], {relativeTo, queryParams, fragment, preserveQueryParams, queryParamsHandling,\n                        preserveFragment}: NavigationExtras = {}): UrlTree {\n    if (isDevMode() && preserveQueryParams && /** @type {?} */(( <any>console)) && /** @type {?} */(( <any>console.warn))) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    const /** @type {?} */ a = relativeTo || this.routerState.root;\n    const /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let /** @type {?} */ q: Params = null;\n    if (queryParamsHandling) {\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = merge(this.currentUrlTree.queryParams, queryParams);\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams;\n      }\n    } else {\n      q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, q, f);\n  }\n/**\n * Navigate based on the provided url. This navigation is always absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigateByUrl(\"/team/33/user/11\");\n * \n * // Navigate without updating the URL\n * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n * ```\n * \n * In opposite to `navigate`, `navigateByUrl` takes a whole URL\n * and does not apply any delta to the current one.\n * @param {?} url\n * @param {?=} extras\n * @return {?}\n */\nnavigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    const /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\n    const /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', extras);\n  }\n/**\n * Navigate based on the provided array of commands and a starting point.\n * If no starting route is provided, the navigation is absolute.\n * \n * Returns a promise that:\n * - resolves to 'true' when navigation succeeds,\n * - resolves to 'false' when navigation fails,\n * - is rejected when an error happens.\n * \n * ### Usage\n * \n * ```\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n * \n * // Navigate without updating the URL\n * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n * ```\n * \n * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\n * URL.\n * @param {?} commands\n * @param {?=} extras\n * @return {?}\n */\nnavigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {\n      extras.queryParams = this.removeEmptyProps(extras.queryParams);\n    }\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n/**\n * Serializes a {\\@link UrlTree} into a string\n * @param {?} url\n * @return {?}\n */\nserializeUrl(url: UrlTree): string { return this.urlSerializer.serialize(url); }\n/**\n * Parses a string into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparseUrl(url: string): UrlTree { return this.urlSerializer.parse(url); }\n/**\n * Returns whether the url is activated\n * @param {?} url\n * @param {?} exact\n * @return {?}\n */\nisActive(url: string|UrlTree, exact: boolean): boolean {\n    if (url instanceof UrlTree) {\n      return containsTree(this.currentUrlTree, url, exact);\n    } else {\n      const /** @type {?} */ urlTree = this.urlSerializer.parse(url);\n      return containsTree(this.currentUrlTree, urlTree, exact);\n    }\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nprivate removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const /** @type {?} */ value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n/**\n * @return {?}\n */\nprivate processNavigations(): void {\n    concatMap\n        .call(\n            this.navigations,\n            (nav: NavigationParams) => {\n              if (nav) {\n                this.executeScheduledNavigation(nav);\n                // a failed navigation should not stop the router from processing\n                // further navigations => the catch\n                return nav.promise.catch(() => {});\n              } else {\n                return /** @type {?} */(( <any>of (null)));\n              }\n            })\n        .subscribe(() => {});\n  }\n/**\n * @param {?} rawUrl\n * @param {?} source\n * @param {?} extras\n * @return {?}\n */\nprivate scheduleNavigation(rawUrl: UrlTree, source: NavigationSource, extras: NavigationExtras):\n      Promise<boolean> {\n    const /** @type {?} */ lastNavigation = this.navigations.value;\n\n    // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n    // and that navigation results in 'replaceState' that leads to the same URL,\n    // we should skip those.\n    if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return null;  // return value is not used\n    }\n\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker.\n    if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return null;  // return value is not used\n    }\n\n    let /** @type {?} */ resolve: any = null;\n    let /** @type {?} */ reject: any = null;\n\n    const /** @type {?} */ promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    const /** @type {?} */ id = ++this.navigationId;\n    this.navigations.next({id, source, rawUrl, extras, resolve, reject, promise});\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => Promise.reject(e));\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\nprivate executeScheduledNavigation({id, rawUrl, extras, resolve, reject}: NavigationParams):\n      void {\n    const /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\n    const /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\n\n    if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null))\n          .then(resolve, reject);\n\n      // we cannot process the current URL, but we could process the previous one =>\n      // we need to do some cleanup\n    } else if (\n        urlTransition && this.rawUrlTree &&\n        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\n      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));\n      Promise.resolve()\n          .then(\n              (_) => this.runNavigate(\n                  url, rawUrl, false, false, id,\n                  createEmptyState(url, this.rootComponentType).snapshot))\n          .then(resolve, reject);\n\n    } else {\n      this.rawUrlTree = rawUrl;\n      resolve(null);\n    }\n  }\n/**\n * @param {?} url\n * @param {?} rawUrl\n * @param {?} shouldPreventPushState\n * @param {?} shouldReplaceUrl\n * @param {?} id\n * @param {?} precreatedState\n * @return {?}\n */\nprivate runNavigate(\n      url: UrlTree, rawUrl: UrlTree, shouldPreventPushState: boolean, shouldReplaceUrl: boolean,\n      id: number, precreatedState: RouterStateSnapshot): Promise<boolean> {\n    if (id !== this.navigationId) {\n      this.location.go(this.urlSerializer.serialize(this.currentUrlTree));\n      this.routerEvents.next(new NavigationCancel(\n          id, this.serializeUrl(url),\n          `Navigation ID ${id} is not equal to the current navigation id ${this.navigationId}`));\n      return Promise.resolve(false);\n    }\n\n    return new Promise((resolvePromise, rejectPromise) => {\n      // create an observable of the url and route state snapshot\n      // this operation do not result in any side effects\n      let /** @type {?} */ urlAndSnapshot$: Observable<{appliedUrl: UrlTree, snapshot: RouterStateSnapshot}>;\n      if (!precreatedState) {\n        const /** @type {?} */ moduleInjector = this.ngModule.injector;\n        const /** @type {?} */ redirectsApplied$ =\n            applyRedirects(moduleInjector, this.configLoader, this.urlSerializer, url, this.config);\n\n        urlAndSnapshot$ = mergeMap.call(redirectsApplied$, (appliedUrl: UrlTree) => {\n          return map.call(\n              recognize(\n                  this.rootComponentType, this.config, appliedUrl, this.serializeUrl(appliedUrl)),\n              (snapshot: any) => {\n\n                this.routerEvents.next(new RoutesRecognized(\n                    id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot));\n\n                return {appliedUrl, snapshot};\n              });\n        });\n      } else {\n        urlAndSnapshot$ = of ({appliedUrl: url, snapshot: precreatedState});\n      }\n\n      const /** @type {?} */ beforePreactivationDone$ = mergeMap.call(\n          urlAndSnapshot$, (p: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            return map.call(this.hooks.beforePreactivation(p.snapshot), () => p);\n          });\n\n      // run preactivation: guards and data resolvers\n      let /** @type {?} */ preActivation: PreActivation;\n      const /** @type {?} */ preactivationTraverse$ = map.call(\n          beforePreactivationDone$,\n          ({appliedUrl, snapshot}: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            const /** @type {?} */ moduleInjector = this.ngModule.injector;\n            preActivation =\n                new PreActivation(snapshot, this.currentRouterState.snapshot, moduleInjector);\n            preActivation.traverse(this.outletMap);\n            return {appliedUrl, snapshot};\n          });\n\n      const /** @type {?} */ preactivationCheckGuards$ = mergeMap.call(\n          preactivationTraverse$,\n          ({appliedUrl, snapshot}: {appliedUrl: string, snapshot: RouterStateSnapshot}) => {\n            if (this.navigationId !== id) return of (false);\n\n            return map.call(preActivation.checkGuards(), (shouldActivate: boolean) => {\n              return {appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate};\n            });\n          });\n\n      const /** @type {?} */ preactivationResolveData$ = mergeMap.call(preactivationCheckGuards$, (p: any) => {\n        if (this.navigationId !== id) return of (false);\n\n        if (p.shouldActivate) {\n          return map.call(preActivation.resolveData(), () => p);\n        } else {\n          return of (p);\n        }\n      });\n\n      const /** @type {?} */ preactivationDone$ = mergeMap.call(preactivationResolveData$, (p: any) => {\n        return map.call(this.hooks.afterPreactivation(p.snapshot), () => p);\n      });\n\n\n      // create router state\n      // this operation has side effects => route state is being affected\n      const /** @type {?} */ routerState$ =\n          map.call(preactivationDone$, ({appliedUrl, snapshot, shouldActivate}: any) => {\n            if (shouldActivate) {\n              const /** @type {?} */ state =\n                  createRouterState(this.routeReuseStrategy, snapshot, this.currentRouterState);\n              return {appliedUrl, state, shouldActivate};\n            } else {\n              return {appliedUrl, state: null, shouldActivate};\n            }\n          });\n\n\n      // applied the new router state\n      // this operation has side effects\n      let /** @type {?} */ navigationIsSuccessful: boolean;\n      const /** @type {?} */ storedState = this.currentRouterState;\n      const /** @type {?} */ storedUrl = this.currentUrlTree;\n\n      routerState$\n          .forEach(({appliedUrl, state, shouldActivate}: any) => {\n            if (!shouldActivate || id !== this.navigationId) {\n              navigationIsSuccessful = false;\n              return;\n            }\n\n            this.currentUrlTree = appliedUrl;\n            this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n\n            this.currentRouterState = state;\n\n            if (!shouldPreventPushState) {\n              const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n              if (this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {\n                this.location.replaceState(path);\n              } else {\n                this.location.go(path);\n              }\n            }\n\n            new ActivateRoutes(this.routeReuseStrategy, state, storedState)\n                .activate(this.outletMap);\n\n            navigationIsSuccessful = true;\n          })\n          .then(\n              () => {\n                if (navigationIsSuccessful) {\n                  this.navigated = true;\n                  this.routerEvents.next(new NavigationEnd(\n                      id, this.serializeUrl(url), this.serializeUrl(this.currentUrlTree)));\n                  resolvePromise(true);\n                } else {\n                  this.resetUrlToCurrentUrlTree();\n                  this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), ''));\n                  resolvePromise(false);\n                }\n              },\n              (e: any) => {\n                if (isNavigationCancelingError(e)) {\n                  this.resetUrlToCurrentUrlTree();\n                  this.navigated = true;\n                  this.routerEvents.next(\n                      new NavigationCancel(id, this.serializeUrl(url), e.message));\n                  resolvePromise(false);\n                } else {\n                  this.routerEvents.next(new NavigationError(id, this.serializeUrl(url), e));\n                  try {\n                    resolvePromise(this.errorHandler(e));\n                  } catch ( /** @type {?} */ee) {\n                    rejectPromise(ee);\n                  }\n                }\n\n                this.currentRouterState = storedState;\n                this.currentUrlTree = storedUrl;\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n                this.location.replaceState(this.serializeUrl(this.rawUrlTree));\n              });\n    });\n  }\n/**\n * @return {?}\n */\nprivate resetUrlToCurrentUrlTree(): void {\n    const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\n    this.location.replaceState(path);\n  }\n}\n\nfunction Router_tsickle_Closure_declarations() {\n/** @type {?} */\nRouter.prototype.currentUrlTree;\n/** @type {?} */\nRouter.prototype.rawUrlTree;\n/** @type {?} */\nRouter.prototype.navigations;\n/** @type {?} */\nRouter.prototype.routerEvents;\n/** @type {?} */\nRouter.prototype.currentRouterState;\n/** @type {?} */\nRouter.prototype.locationSubscription;\n/** @type {?} */\nRouter.prototype.navigationId;\n/** @type {?} */\nRouter.prototype.configLoader;\n/** @type {?} */\nRouter.prototype.ngModule;\n/**\n * Error handler that is invoked when a navigation errors.\n * \n * See {\\@link ErrorHandler} for more information.\n * @type {?}\n */\nRouter.prototype.errorHandler;\n/**\n * Indicates if at least one navigation happened.\n * @type {?}\n */\nRouter.prototype.navigated;\n/**\n * Used by RouterModule. This allows us to\n * pause the navigation either before preactivation or after it.\n * \\@internal\n * @type {?}\n */\nRouter.prototype.hooks;\n/**\n * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n * @type {?}\n */\nRouter.prototype.urlHandlingStrategy;\n/** @type {?} */\nRouter.prototype.routeReuseStrategy;\n/** @type {?} */\nRouter.prototype.rootComponentType;\n/** @type {?} */\nRouter.prototype.urlSerializer;\n/** @type {?} */\nRouter.prototype.outletMap;\n/** @type {?} */\nRouter.prototype.location;\n/** @type {?} */\nRouter.prototype.config;\n}\n\nclass CanActivate {\n/**\n * @param {?} path\n */\nconstructor(public path: ActivatedRouteSnapshot[]) {}\n/**\n * @return {?}\n */\nget route(): ActivatedRouteSnapshot { return this.path[this.path.length - 1]; }\n}\n\nfunction CanActivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanActivate.prototype.path;\n}\n\nclass CanDeactivate {\n/**\n * @param {?} component\n * @param {?} route\n */\nconstructor(public component: Object,\npublic route: ActivatedRouteSnapshot) {}\n}\n\nfunction CanDeactivate_tsickle_Closure_declarations() {\n/** @type {?} */\nCanDeactivate.prototype.component;\n/** @type {?} */\nCanDeactivate.prototype.route;\n}\n\nexport class PreActivation {\nprivate checks: Array<CanActivate|CanDeactivate> = [];\n/**\n * @param {?} future\n * @param {?} curr\n * @param {?} moduleInjector\n */\nconstructor(\nprivate future: RouterStateSnapshot,\nprivate curr: RouterStateSnapshot,\nprivate moduleInjector: Injector) {}\n/**\n * @param {?} parentOutletMap\n * @return {?}\n */\ntraverse(parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ futureRoot = this.future._root;\n    const /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\n    this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);\n  }\n/**\n * @return {?}\n */\ncheckGuards(): Observable<boolean> {\n    if (this.checks.length === 0) return of (true);\n    const /** @type {?} */ checks$ = from(this.checks);\n    const /** @type {?} */ runningChecks$ = mergeMap.call(checks$, (s: any) => {\n      if (s instanceof CanActivate) {\n        return andObservables(\n            from([this.runCanActivateChild(s.path), this.runCanActivate(s.route)]));\n      } else if (s instanceof CanDeactivate) {\n        // workaround https://github.com/Microsoft/TypeScript/issues/7271\n        const /** @type {?} */ s2 = /** @type {?} */(( s as CanDeactivate));\n        return this.runCanDeactivate(s2.component, s2.route);\n      } else {\n        throw new Error('Cannot be reached');\n      }\n    });\n    return every.call(runningChecks$, (result: any) => result === true);\n  }\n/**\n * @return {?}\n */\nresolveData(): Observable<any> {\n    if (this.checks.length === 0) return of (null);\n    const /** @type {?} */ checks$ = from(this.checks);\n    const /** @type {?} */ runningChecks$ = concatMap.call(checks$, (s: any) => {\n      if (s instanceof CanActivate) {\n        return this.runResolve(s.route);\n      } else {\n        return of (null);\n      }\n    });\n    return reduce.call(runningChecks$, (_: any, __: any) => _);\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @param {?} futurePath\n * @return {?}\n */\nprivate traverseChildRoutes(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      outletMap: RouterOutletMap, futurePath: ActivatedRouteSnapshot[]): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n\n    futureNode.children.forEach(c => {\n      this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));\n      delete prevChildren[c.value.outlet];\n    });\n    forEach(\n        prevChildren,\n        (v: any, k: string) => this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]));\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @param {?} futurePath\n * @return {?}\n */\ntraverseRoutes(\n      futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n      parentOutletMap: RouterOutletMap, futurePath: ActivatedRouteSnapshot[]): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n    const /** @type {?} */ outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;\n\n    // reusing the node\n    if (curr && future._routeConfig === curr._routeConfig) {\n      if (this.shouldRunGuardsAndResolvers(\n              curr, future, future._routeConfig.runGuardsAndResolvers)) {\n        this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));\n      } else {\n        // we need to set the data\n        future.data = curr.data;\n        future._resolvedData = curr._resolvedData;\n      }\n\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.traverseChildRoutes(\n            futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);\n      }\n    } else {\n      if (curr) {\n        this.deactiveRouteAndItsChildren(currNode, outlet);\n      }\n\n      this.checks.push(new CanActivate(futurePath));\n      // If we have a component, we need to go through an outlet.\n      if (future.component) {\n        this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);\n      }\n    }\n  }\n/**\n * @param {?} curr\n * @param {?} future\n * @param {?} mode\n * @return {?}\n */\nprivate shouldRunGuardsAndResolvers(\n      curr: ActivatedRouteSnapshot, future: ActivatedRouteSnapshot,\n      mode: RunGuardsAndResolvers): boolean {\n    switch (mode) {\n      case 'always':\n        return true;\n\n      case 'paramsOrQueryParamsChange':\n        return !equalParamsAndUrlSegments(curr, future) ||\n            !shallowEqual(curr.queryParams, future.queryParams);\n\n      case 'paramsChange':\n      default:\n        return !equalParamsAndUrlSegments(curr, future);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} outlet\n * @return {?}\n */\nprivate deactiveRouteAndItsChildren(\n      route: TreeNode<ActivatedRouteSnapshot>, outlet: RouterOutlet): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(route);\n    const /** @type {?} */ r = route.value;\n\n    forEach(prevChildren, (v: any, k: string) => {\n      if (!r.component) {\n        this.deactiveRouteAndItsChildren(v, outlet);\n      } else if (!!outlet) {\n        this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);\n      } else {\n        this.deactiveRouteAndItsChildren(v, null);\n      }\n    });\n\n    if (!r.component) {\n      this.checks.push(new CanDeactivate(null, r));\n    } else if (outlet && outlet.isActivated) {\n      this.checks.push(new CanDeactivate(outlet.component, r));\n    } else {\n      this.checks.push(new CanDeactivate(null, r));\n    }\n  }\n/**\n * @param {?} future\n * @return {?}\n */\nprivate runCanActivate(future: ActivatedRouteSnapshot): Observable<boolean> {\n    const /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0) return of (true);\n    const /** @type {?} */ obs = map.call(from(canActivate), (c: any) => {\n      const /** @type {?} */ guard = this.getToken(c, future);\n      let /** @type {?} */ observable: Observable<boolean>;\n      if (guard.canActivate) {\n        observable = wrapIntoObservable(guard.canActivate(future, this.future));\n      } else {\n        observable = wrapIntoObservable(guard(future, this.future));\n      }\n      return first.call(observable);\n    });\n    return andObservables(obs);\n  }\n/**\n * @param {?} path\n * @return {?}\n */\nprivate runCanActivateChild(path: ActivatedRouteSnapshot[]): Observable<boolean> {\n    const /** @type {?} */ future = path[path.length - 1];\n\n    const /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\n                                       .reverse()\n                                       .map(p => this.extractCanActivateChild(p))\n                                       .filter(_ => _ !== null);\n\n    return andObservables(map.call(from(canActivateChildGuards), (d: any) => {\n      const /** @type {?} */ obs = map.call(from(d.guards), (c: any) => {\n        const /** @type {?} */ guard = this.getToken(c, d.node);\n        let /** @type {?} */ observable: Observable<boolean>;\n        if (guard.canActivateChild) {\n          observable = wrapIntoObservable(guard.canActivateChild(future, this.future));\n        } else {\n          observable = wrapIntoObservable(guard(future, this.future));\n        }\n        return first.call(observable);\n      });\n      return andObservables(obs);\n    }));\n  }\n/**\n * @param {?} p\n * @return {?}\n */\nprivate extractCanActivateChild(p: ActivatedRouteSnapshot):\n      {node: ActivatedRouteSnapshot, guards: any[]} {\n    const /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0) return null;\n    return {node: p, guards: canActivateChild};\n  }\n/**\n * @param {?} component\n * @param {?} curr\n * @return {?}\n */\nprivate runCanDeactivate(component: Object, curr: ActivatedRouteSnapshot): Observable<boolean> {\n    const /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0) return of (true);\n    const /** @type {?} */ canDeactivate$ = mergeMap.call(from(canDeactivate), (c: any) => {\n      const /** @type {?} */ guard = this.getToken(c, curr);\n      let /** @type {?} */ observable: Observable<boolean>;\n      if (guard.canDeactivate) {\n        observable =\n            wrapIntoObservable(guard.canDeactivate(component, curr, this.curr, this.future));\n      } else {\n        observable = wrapIntoObservable(guard(component, curr, this.curr, this.future));\n      }\n      return first.call(observable);\n    });\n    return every.call(canDeactivate$, (result: any) => result === true);\n  }\n/**\n * @param {?} future\n * @return {?}\n */\nprivate runResolve(future: ActivatedRouteSnapshot): Observable<any> {\n    const /** @type {?} */ resolve = future._resolve;\n    return map.call(this.resolveNode(resolve, future), (resolvedData: any): any => {\n      future._resolvedData = resolvedData;\n      future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);\n      return null;\n    });\n  }\n/**\n * @param {?} resolve\n * @param {?} future\n * @return {?}\n */\nprivate resolveNode(resolve: ResolveData, future: ActivatedRouteSnapshot): Observable<any> {\n    return waitForMap(resolve, (k, v) => {\n      const /** @type {?} */ resolver = this.getToken(v, future);\n      return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :\n                                wrapIntoObservable(resolver(future, this.future));\n    });\n  }\n/**\n * @param {?} token\n * @param {?} snapshot\n * @return {?}\n */\nprivate getToken(token: any, snapshot: ActivatedRouteSnapshot): any {\n    const /** @type {?} */ config = closestLoadedConfig(snapshot);\n    const /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;\n    return injector.get(token);\n  }\n}\n\nfunction PreActivation_tsickle_Closure_declarations() {\n/** @type {?} */\nPreActivation.prototype.checks;\n/** @type {?} */\nPreActivation.prototype.future;\n/** @type {?} */\nPreActivation.prototype.curr;\n/** @type {?} */\nPreActivation.prototype.moduleInjector;\n}\n\nclass ActivateRoutes {\n/**\n * @param {?} routeReuseStrategy\n * @param {?} futureState\n * @param {?} currState\n */\nconstructor(\nprivate routeReuseStrategy: RouteReuseStrategy,\nprivate futureState: RouterState,\nprivate currState: RouterState) {}\n/**\n * @param {?} parentOutletMap\n * @return {?}\n */\nactivate(parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ futureRoot = this.futureState._root;\n    const /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @return {?}\n */\nprivate deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      outletMap: RouterOutletMap): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);\n      delete prevChildren[c.value.outlet];\n    });\n    forEach(prevChildren, (v: any, k: string) => this.deactiveRouteAndItsChildren(v, outletMap));\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} outletMap\n * @return {?}\n */\nprivate activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      outletMap: RouterOutletMap): void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(\n        c => { this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @return {?}\n */\ndeactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    // reusing the node\n    if (future === curr) {\n      // If we have a normal route, we need to go through an outlet.\n      if (future.component) {\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n        this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);\n      }\n    } else {\n      if (curr) {\n        this.deactiveRouteAndItsChildren(currNode, parentOutletMap);\n      }\n    }\n  }\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentOutletMap\n * @return {?}\n */\nactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ future = futureNode.value;\n    const /** @type {?} */ curr = currNode ? currNode.value : null;\n\n    // reusing the node\n    if (future === curr) {\n      // advance the route to push the parameters\n      advanceActivatedRoute(future);\n\n      // If we have a normal route, we need to go through an outlet.\n      if (future.component) {\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, future);\n        this.activateChildRoutes(futureNode, currNode, outlet.outletMap);\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        this.activateChildRoutes(futureNode, currNode, parentOutletMap);\n      }\n    } else {\n      // if we have a normal route, we need to advance the route\n      // and place the component into the outlet. After that recurse.\n      if (future.component) {\n        advanceActivatedRoute(future);\n        const /** @type {?} */ outlet = getOutlet(parentOutletMap, futureNode.value);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const /** @type {?} */ stored =\n              ( /** @type {?} */((<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot))));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          outlet.attach(stored.componentRef, stored.route.value);\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          const /** @type {?} */ outletMap = new RouterOutletMap();\n          this.placeComponentIntoOutlet(outletMap, future, outlet);\n          this.activateChildRoutes(futureNode, null, outletMap);\n        }\n\n        // if we have a componentless route, we recurse but keep the same outlet map.\n      } else {\n        advanceActivatedRoute(future);\n        this.activateChildRoutes(futureNode, null, parentOutletMap);\n      }\n    }\n  }\n/**\n * @param {?} outletMap\n * @param {?} future\n * @param {?} outlet\n * @return {?}\n */\nprivate placeComponentIntoOutlet(\n      outletMap: RouterOutletMap, future: ActivatedRoute, outlet: RouterOutlet): void {\n    const /** @type {?} */ config = parentLoadedConfig(future.snapshot);\n    const /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n\n    outlet.activateWith(future, cmpFactoryResolver, outletMap);\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate deactiveRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap): void {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentOutletMap);\n    } else {\n      this.deactiveRouteAndOutlet(route, parentOutletMap);\n    }\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap): void {\n    const /** @type {?} */ outlet = getOutlet(parentOutletMap, route.value);\n    const /** @type {?} */ componentRef = outlet.detach();\n    this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route});\n  }\n/**\n * @param {?} route\n * @param {?} parentOutletMap\n * @return {?}\n */\nprivate deactiveRouteAndOutlet(route: TreeNode<ActivatedRoute>, parentOutletMap: RouterOutletMap):\n      void {\n    const /** @type {?} */ prevChildren: {[key: string]: any} = nodeChildrenAsMap(route);\n    let /** @type {?} */ outlet: RouterOutlet = null;\n\n    // getOutlet throws when cannot find the right outlet,\n    // which can happen if an outlet was in an NgIf and was removed\n    try {\n      outlet = getOutlet(parentOutletMap, route.value);\n    } catch ( /** @type {?} */e) {\n      return;\n    }\n    const /** @type {?} */ childOutletMap = outlet.outletMap;\n\n    forEach(prevChildren, (v: any, k: string) => {\n      if (route.value.component) {\n        this.deactiveRouteAndItsChildren(v, childOutletMap);\n      } else {\n        this.deactiveRouteAndItsChildren(v, parentOutletMap);\n      }\n    });\n\n    if (outlet && outlet.isActivated) {\n      outlet.deactivate();\n    }\n  }\n}\n\nfunction ActivateRoutes_tsickle_Closure_declarations() {\n/** @type {?} */\nActivateRoutes.prototype.routeReuseStrategy;\n/** @type {?} */\nActivateRoutes.prototype.futureState;\n/** @type {?} */\nActivateRoutes.prototype.currState;\n}\n\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node: TreeNode<ActivatedRoute>): void {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig {\n  let /** @type {?} */ s = snapshot.parent;\n  while (s) {\n    const /** @type {?} */ c: any = s._routeConfig;\n    if (c && c._loadedConfig) return c._loadedConfig;\n    if (c && c.component) return null;\n    s = s.parent;\n  }\n  return null;\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction closestLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig {\n  if (!snapshot) return null;\n\n  let /** @type {?} */ s = snapshot.parent;\n  while (s) {\n    const /** @type {?} */ c: any = s._routeConfig;\n    if (c && c._loadedConfig) return c._loadedConfig;\n    s = s.parent;\n  }\n  return null;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction nodeChildrenAsMap(node: TreeNode<any>) {\n  return node ? node.children.reduce((m: any, c: TreeNode<any>) => {\n    m[c.value.outlet] = c;\n    return m;\n  }, {}) : {};\n}\n/**\n * @param {?} outletMap\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(outletMap: RouterOutletMap, route: ActivatedRoute): RouterOutlet {\n  const /** @type {?} */ outlet = outletMap._outlets[route.outlet];\n  if (!outlet) {\n    const /** @type {?} */ componentName = ( /** @type {?} */((<any>route.component))).name;\n    if (route.outlet === PRIMARY_OUTLET) {\n      throw new Error(`Cannot find primary outlet to load '${componentName}'`);\n    } else {\n      throw new Error(`Cannot find the outlet ${route.outlet} to load '${componentName}'`);\n    }\n  }\n  return outlet;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands: string[]): void {\n  for (let /** @type {?} */ i = 0; i < commands.length; i++) {\n    const /** @type {?} */ cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UrlTree} from './url_tree';\n/**\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class UrlHandlingStrategy {\n/**\n * Tells the router if this URL should be processed.\n * \n * When it returns true, the router will execute the regular navigation.\n * When it returns false, the router will set the router state to an empty state.\n * As a result, all the active components will be destroyed.\n * \n * @abstract\n * @param {?} url\n * @return {?}\n */\nshouldProcessUrl(url: UrlTree) {}\n/**\n * Extracts the part of the URL that should be handled by the router.\n * The rest of the URL will remain untouched.\n * @abstract\n * @param {?} url\n * @return {?}\n */\nextract(url: UrlTree) {}\n/**\n * Merges the URL fragment with the rest of the URL.\n * @abstract\n * @param {?} newUrlPart\n * @param {?} rawUrl\n * @return {?}\n */\nmerge(newUrlPart: UrlTree, rawUrl: UrlTree) {}\n}\n/**\n * \\@experimental\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n/**\n * @param {?} url\n * @return {?}\n */\nshouldProcessUrl(url: UrlTree): boolean { return true; }\n/**\n * @param {?} url\n * @return {?}\n */\nextract(url: UrlTree): UrlTree { return url; }\n/**\n * @param {?} newUrlPart\n * @param {?} wholeUrl\n * @return {?}\n */\nmerge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree { return newUrlPart; }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RouterOutlet} from './directives/router_outlet';\n/**\n * \\@whatItDoes Contains all the router outlets created in a component.\n * \n * \\@stable\n */\nexport class RouterOutletMap {\n/**\n * \\@internal\n */\n_outlets: {[name: string]: RouterOutlet} = {};\n/**\n * Adds an outlet to this map.\n * @param {?} name\n * @param {?} outlet\n * @return {?}\n */\nregisterOutlet(name: string, outlet: RouterOutlet): void { this._outlets[name] = outlet; }\n/**\n * Removes an outlet from this map.\n * @param {?} name\n * @return {?}\n */\nremoveOutlet(name: string): void { this._outlets[name] = undefined; }\n}\n\nfunction RouterOutletMap_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nRouterOutletMap.prototype._outlets;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {of } from 'rxjs/observable/of';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, defaultUrlMatcher} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {forEach, last, merge} from './utils/collection';\nimport {TreeNode} from './utils/tree';\nclass NoMatch {}\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @return {?}\n */\nexport function recognize(\n    rootComponentType: Type<any>, config: Routes, urlTree: UrlTree,\n    url: string): Observable<RouterStateSnapshot> {\n  return new Recognizer(rootComponentType, config, urlTree, url).recognize();\n}\nclass Recognizer {\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n */\nconstructor(\nprivate rootComponentType: Type<any>,\nprivate config: Routes,\nprivate urlTree: UrlTree,\nprivate url: string) {}\n/**\n * @return {?}\n */\nrecognize(): Observable<RouterStateSnapshot> {\n    try {\n      const /** @type {?} */ rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n\n      const /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n\n      const /** @type {?} */ root = new ActivatedRouteSnapshot(\n          [], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {},\n          PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n\n      const /** @type {?} */ rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n      const /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\n      this.inheriteParamsAndData(routeState._root);\n      return of (routeState);\n\n    } catch ( /** @type {?} */e) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n/**\n * @param {?} routeNode\n * @return {?}\n */\ninheriteParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const /** @type {?} */ route = routeNode.value;\n\n    const /** @type {?} */ i = inheritedParamsDataResolve(route);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheriteParamsAndData(n));\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    } else {\n      return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    }\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @return {?}\n */\nprocessChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    const /** @type {?} */ children = mapChildrenIntoArray(\n        segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n    checkOutletNameUniqueness(children);\n    sortActivatedRouteSnapshots(children);\n    return children;\n  }\n/**\n * @param {?} config\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    for (const /** @type {?} */ r of config) {\n      try {\n        return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof NoMatch)) throw e;\n      }\n    }\n    if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    } else {\n      throw new NoMatch();\n    }\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} route\n * @param {?} rawSegment\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprocessSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    if (route.redirectTo) throw new NoMatch();\n\n    if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n    if (route.path === '**') {\n      const /** @type {?} */ params = segments.length > 0 ? last(segments).parameters : {};\n      const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment,\n          getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const {consumedSegments, parameters, lastChild} = match(rawSegment, route, segments);\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} =\n        split(rawSegment, consumedSegments, rawSlicedSegments, childConfig);\n\n    const /** @type {?} */ snapshot = new ActivatedRouteSnapshot(\n        consumedSegments, parameters, Object.freeze(this.urlTree.queryParams),\n        this.urlTree.fragment, getData(route), outlet, route.component, route,\n        getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length,\n        getResolve(route));\n\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n\n    } else if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n\n    } else {\n      const /** @type {?} */ children =\n          this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n  }\n}\n\nfunction Recognizer_tsickle_Closure_declarations() {\n/** @type {?} */\nRecognizer.prototype.rootComponentType;\n/** @type {?} */\nRecognizer.prototype.config;\n/** @type {?} */\nRecognizer.prototype.urlTree;\n/** @type {?} */\nRecognizer.prototype.url;\n}\n\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  } else if (route.loadChildren) {\n    return ( /** @type {?} */((<any>route)))._loadedConfig.routes;\n  } else {\n    return [];\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]) {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch();\n    } else {\n      return {consumedSegments: [], lastChild: 0, parameters: {}};\n    }\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n  if (!res) throw new NoMatch();\n\n  const /** @type {?} */ posParams: {[n: string]: string} = {};\n  forEach(res.posParams, (v: UrlSegment, k: string) => { posParams[k] = v.path; });\n  const /** @type {?} */ parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);\n\n  return {consumedSegments: res.consumed, lastChild: res.consumed.length, parameters};\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const /** @type {?} */ names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const /** @type {?} */ p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const /** @type {?} */ c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let /** @type {?} */ s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let /** @type {?} */ s = segmentGroup;\n  let /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptyPaths(\n                              segmentGroup, consumedSegments, config,\n                              new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n\n  } else if (\n      slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n\n  } else {\n    const /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = segmentGroup.segments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return merge(children, res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const /** @type {?} */ s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathMatch(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathMatch(segmentGroup, slicedSegments, r)).length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n    return false;\n  return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route: Route): Data {\n  return route.data ? route.data : {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve ? route.resolve : {};\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const /** @type {?} */ segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params, fragment: string): UrlTree {\n  let /** @type {?} */ qp: any = {};\n  if (queryParams) {\n    forEach(queryParams, (value: any, name: any) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n/**\n * @param {?} isAbsolute\n * @param {?} numberOfDoubleDots\n * @param {?} commands\n */\nconstructor(\npublic isAbsolute: boolean,\npublic numberOfDoubleDots: number,\npublic commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n/**\n * @return {?}\n */\npublic toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\nfunction Navigation_tsickle_Closure_declarations() {\n/** @type {?} */\nNavigation.prototype.isAbsolute;\n/** @type {?} */\nNavigation.prototype.numberOfDoubleDots;\n/** @type {?} */\nNavigation.prototype.commands;\n}\n\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let /** @type {?} */ numberOfDoubleDots = 0;\n  let /** @type {?} */ isAbsolute = false;\n\n  const /** @type {?} */ res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const /** @type {?} */ outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n/**\n * @param {?} segmentGroup\n * @param {?} processChildren\n * @param {?} index\n */\nconstructor(\npublic segmentGroup: UrlSegmentGroup,\npublic processChildren: boolean,\npublic index: number) {\n  }\n}\n\nfunction Position_tsickle_Closure_declarations() {\n/** @type {?} */\nPosition.prototype.segmentGroup;\n/** @type {?} */\nPosition.prototype.processChildren;\n/** @type {?} */\nPosition.prototype.index;\n}\n\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  }\n\n  const /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let /** @type {?} */ g = group;\n  let /** @type {?} */ ci = index;\n  let /** @type {?} */ dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent;\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command: any): any {\n  if (typeof command === 'object' && command != null && command.outlets) {\n    return command.outlets[PRIMARY_OUTLET];\n  }\n  return `${command}`;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands: any[]): {[k: string]: any[]} {\n  if (!(typeof commands[0] === 'object')) return {[PRIMARY_OUTLET]: commands};\n  if (commands[0].outlets === undefined) return {[PRIMARY_OUTLET]: commands};\n  return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\n  const /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const /** @type {?} */ outlets = getOutlets(commands);\n    const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands: any, outlet: string) => {\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let /** @type {?} */ currentCommandIndex = 0;\n  let /** @type {?} */ currentPathIndex = startIndex;\n\n  const /** @type {?} */ noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\n    const /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\n    const /** @type {?} */ next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\n\n  let /** @type {?} */ i = 0;\n  while (i < commands.length) {\n    if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n      const /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const /** @type {?} */ p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, commands[0]));\n      i++;\n      continue;\n    }\n\n    const /** @type {?} */ curr = getPath(commands[i]);\n    const /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets: {[name: string]: any}): any {\n  const /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands: any, outlet: string) => {\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const /** @type {?} */ res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nexport function createRouterState(\n    routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot,\n    prevState: RouterState): RouterState {\n  const /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState?: TreeNode<ActivatedRoute>): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const /** @type {?} */ value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n\n    // retrieve an activated route that is used to be displayed, but is not currently displayed\n  } else if (routeReuseStrategy.retrieve(curr.value)) {\n    const /** @type {?} */ tree: TreeNode<ActivatedRoute> =\n        ( /** @type {?} */((<DetachedRouteHandleInternal>routeReuseStrategy.retrieve(curr.value)))).route;\n    setFutureSnapshotsOfActivatedRoutes(curr, tree);\n    return tree;\n\n  } else {\n    const /** @type {?} */ value = createActivatedRoute(curr.value);\n    const /** @type {?} */ children = curr.children.map(c => createNode(routeReuseStrategy, c));\n    return new TreeNode<ActivatedRoute>(value, children);\n  }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(\n    curr: TreeNode<ActivatedRouteSnapshot>, result: TreeNode<ActivatedRoute>): void {\n  if (curr.value.routeConfig !== result.value.routeConfig) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n  }\n  if (curr.children.length !== result.children.length) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n  }\n  result.value._futureSnapshot = curr.value;\n  for (let /** @type {?} */ i = 0; i < curr.children.length; ++i) {\n    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n  }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState: TreeNode<ActivatedRoute>) {\n  return curr.children.map(child => {\n    for (const /** @type {?} */ p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n      new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams),\n      new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {merge, shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n/**\n * \\@whatItDoes Represents the state of the router.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments,\n * the extracted parameters, and the resolved data.\n * \n * See {\\@link ActivatedRoute} for more information.\n * \n * \\@stable\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} snapshot\n */\nconstructor(\n      root: TreeNode<ActivatedRoute>,\npublic snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterStateSnapshot<RouterState, ActivatedRoute>(this, root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.snapshot.toString(); }\n}\n\nfunction RouterState_tsickle_Closure_declarations() {\n/**\n * The current snapshot of the router state\n * @type {?}\n */\nRouterState.prototype.snapshot;\n}\n\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>): RouterState {\n  const /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const /** @type {?} */ emptyParams = new BehaviorSubject({});\n  const /** @type {?} */ emptyData = new BehaviorSubject({});\n  const /** @type {?} */ emptyQueryParams = new BehaviorSubject({});\n  const /** @type {?} */ fragment = new BehaviorSubject('');\n  const /** @type {?} */ activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>): RouterStateSnapshot {\n  const /** @type {?} */ emptyParams = {};\n  const /** @type {?} */ emptyData = {};\n  const /** @type {?} */ emptyQueryParams = {};\n  const /** @type {?} */ fragment = '';\n  const /** @type {?} */ activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({...}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  snapshot: ActivatedRouteSnapshot;\n/**\n * \\@internal\n */\n_futureSnapshot: ActivatedRouteSnapshot;\n/**\n * \\@internal\n */\n_routerState: RouterState;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} futureSnapshot\n */\nconstructor(\npublic url: Observable<UrlSegment[]>,\npublic params: Observable<Params>,\npublic queryParams: Observable<Params>,\npublic fragment: Observable<string>,\npublic data: Observable<Data>,\npublic outlet: string,\npublic component: Type<any>|string, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route { return this._futureSnapshot.routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRoute { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRoute { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRoute { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRoute[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nfunction ActivatedRoute_tsickle_Closure_declarations() {\n/**\n * The current snapshot of this route\n * @type {?}\n */\nActivatedRoute.prototype.snapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._futureSnapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._routerState;\n/**\n * An observable of the URL segments matched by this route\n * @type {?}\n */\nActivatedRoute.prototype.url;\n/**\n * An observable of the matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRoute.prototype.params;\n/**\n * An observable of the query parameters shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.queryParams;\n/**\n * An observable of the URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.fragment;\n/**\n * An observable of the static and resolved data of this route.\n * @type {?}\n */\nActivatedRoute.prototype.data;\n/**\n * The outlet name of the route. It's a constant\n * @type {?}\n */\nActivatedRoute.prototype.outlet;\n/** @type {?} */\nActivatedRoute.prototype.component;\n}\n\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n/**\n * \\@internal\n * @param {?} route\n * @return {?}\n */\nexport function inheritedParamsDataResolve(route: ActivatedRouteSnapshot): Inherited {\n  const /** @type {?} */ pathToRoot = route.pathFromRoot;\n\n  let /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n\n  while (inhertingStartingFrom >= 1) {\n    const /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n    const /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];\n    // current route is an empty path => inherits its parent's params and data\n    if (current.routeConfig && current.routeConfig.path === '') {\n      inhertingStartingFrom--;\n\n      // parent is componentless => current route should inherit its params and data\n    } else if (!parent.component) {\n      inhertingStartingFrom--;\n\n    } else {\n      break;\n    }\n  }\n\n  return pathToRoot.slice(inhertingStartingFrom).reduce((res, curr) => {\n    const /** @type {?} */ params = merge(res.params, curr.params);\n    const /** @type {?} */ data = merge(res.data, curr.data);\n    const /** @type {?} */ resolve = merge(res.resolve, curr._resolvedData);\n    return {params, data, resolve};\n  }, /** @type {?} */(( <any>{params: {}, data: {}, resolve: {}})));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'./my-component.html'}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRouteSnapshot {\n/**\n * \\@internal *\n */\n_routeConfig: Route;\n/**\n * \\@internal *\n */\n_urlSegment: UrlSegmentGroup;\n/**\n * \\@internal\n */\n_lastPathIndex: number;\n/**\n * \\@internal\n */\n_resolve: ResolveData;\n/**\n * \\@internal\n */\n_resolvedData: Data;\n/**\n * \\@internal\n */\n_routerState: RouterStateSnapshot;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} routeConfig\n * @param {?} urlSegment\n * @param {?} lastPathIndex\n * @param {?} resolve\n */\nconstructor(\npublic url: UrlSegment[],\npublic params: Params,\npublic queryParams: Params,\npublic fragment: string,\npublic data: Data,\npublic outlet: string,\npublic component: Type<any>|string, routeConfig: Route, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route { return this._routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRouteSnapshot { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRouteSnapshot { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRouteSnapshot { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ url = this.url.map(segment => segment.toString()).join('/');\n    const /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\nfunction ActivatedRouteSnapshot_tsickle_Closure_declarations() {\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routeConfig;\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._urlSegment;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._lastPathIndex;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolve;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolvedData;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routerState;\n/**\n * The URL segments matched by this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.url;\n/**\n * The matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.params;\n/**\n * The query parameters shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.queryParams;\n/**\n * The URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.fragment;\n/**\n * The static and resolved data of this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.data;\n/**\n * The outlet name of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.outlet;\n/**\n * The component of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.component;\n}\n\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n * \n * \\@stable\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n/**\n * \\@internal\n * @param {?} url\n * @param {?} root\n */\nconstructor(\npublic url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterStateSnapshot<RouterStateSnapshot, ActivatedRouteSnapshot>(this, root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return serializeNode(this._root); }\n}\n\nfunction RouterStateSnapshot_tsickle_Closure_declarations() {\n/**\n * The url from which this snapshot was created\n * @type {?}\n */\nRouterStateSnapshot.prototype.url;\n}\n\n/**\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterStateSnapshot<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterStateSnapshot(state, c));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const /** @type {?} */ c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const /** @type {?} */ currentSnapshot = route.snapshot;\n    route.snapshot = route._futureSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {\n      ( /** @type {?} */((<any>route.queryParams))).next(route._futureSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {\n      ( /** @type {?} */((<any>route.fragment))).next(route._futureSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {\n      ( /** @type {?} */((<any>route.params))).next(route._futureSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {\n      ( /** @type {?} */((<any>route.url))).next(route._futureSnapshot.url);\n    }\n    if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {\n      ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n  }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));\n}","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class Tree<T> {\n/**\n * \\@internal\n */\n_root: TreeNode<T>;\n/**\n * @param {?} root\n */\nconstructor(root: TreeNode<T>) { this._root = root; }\n/**\n * @return {?}\n */\nget root(): T { return this._root.value; }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nparent(t: T): T {\n    const /** @type {?} */ p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nchildren(t: T): T[] {\n    const /** @type {?} */ n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nfirstChild(t: T): T {\n    const /** @type {?} */ n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\nsiblings(t: T): T[] {\n    const /** @type {?} */ p = findPath(t, this._root, []);\n    if (p.length < 2) return [];\n\n    const /** @type {?} */ c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n/**\n * \\@internal\n * @param {?} t\n * @return {?}\n */\npathFromRoot(t: T): T[] { return findPath(t, this._root, []).map(s => s.value); }\n}\n\nfunction Tree_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nTree.prototype._root;\n}\n\n/**\n * @param {?} expected\n * @param {?} c\n * @return {?}\n */\nfunction findNode<T>(expected: T, c: TreeNode<T>): TreeNode<T> {\n  if (expected === c.value) return c;\n  for (const /** @type {?} */ cc of c.children) {\n    const /** @type {?} */ r = findNode(expected, cc);\n    if (r) return r;\n  }\n  return null;\n}\n/**\n * @param {?} expected\n * @param {?} c\n * @param {?} collected\n * @return {?}\n */\nfunction findPath<T>(expected: T, c: TreeNode<T>, collected: TreeNode<T>[]): TreeNode<T>[] {\n  collected.push(c);\n  if (expected === c.value) return collected;\n\n  for (const /** @type {?} */ cc of c.children) {\n    const /** @type {?} */ cloned = collected.slice(0);\n    const /** @type {?} */ r = findPath(expected, cc, cloned);\n    if (r.length > 0) return r;\n  }\n\n  return [];\n}\nexport class TreeNode<T> {\n/**\n * @param {?} value\n * @param {?} children\n */\nconstructor(public value: T,\npublic children: TreeNode<T>[]) {}\n/**\n * @return {?}\n */\ntoString(): string { return `TreeNode(${this.value})`; }\n}\n\nfunction TreeNode_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeNode.prototype.value;\n/** @type {?} */\nTreeNode.prototype.children;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory, Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * @whatItDoes Represents router configuration.\n *\n * @description\n * `Routes` is an array of route configurations. Each one has the following properties:\n *\n * - `path` is a string that uses the route matcher DSL.\n * - `pathMatch` is a string that specifies the matching strategy.\n * - `matcher` defines a custom strategy for path matching and supersedes `path` and `pathMatch`.\n *   See {@link UrlMatcher} for more info.\n * - `component` is a component type.\n * - `redirectTo` is the url fragment which will replace the current matched segment.\n * - `outlet` is the name of the outlet the component should be placed into.\n * - `canActivate` is an array of DI tokens used to look up CanActivate handlers. See\n *   {@link CanActivate} for more info.\n * - `canActivateChild` is an array of DI tokens used to look up CanActivateChild handlers. See\n *   {@link CanActivateChild} for more info.\n * - `canDeactivate` is an array of DI tokens used to look up CanDeactivate handlers. See\n *   {@link CanDeactivate} for more info.\n * - `canLoad` is an array of DI tokens used to look up CanDeactivate handlers. See\n *   {@link CanLoad} for more info.\n * - `data` is additional data provided to the component via `ActivatedRoute`.\n * - `resolve` is a map of DI tokens used to look up data resolvers. See {@link Resolve} for more\n *   info.\n * - `runGuardsAndResolvers` defines when guards and resovlers will be run. By default they run only\n *    when the matrix parameters of the route change. When set to `paramsOrQueryParamsChange` they\n *    will also run when query params change. And when set to `always`, they will run every time.\n * - `children` is an array of child route definitions.\n * - `loadChildren` is a reference to lazy loaded child routes. See {@link LoadChildren} for more\n *   info.\n *\n * ### Simple Configuration\n *\n * ```\n * [{\n *   path: 'team/:id',\n  *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/bob`, the router will create the team component with the user\n * component in it.\n *\n * ### Multiple Outlets\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * When navigating to `/team/11(aux:chat/jim)`, the router will create the team component next to\n * the chat component. The chat component will be placed into the aux outlet.\n *\n * ### Wild Cards\n *\n * ```\n * [{\n *   path: '**',\n *   component: Sink\n * }]\n * ```\n *\n * Regardless of where you navigate to, the router will instantiate the sink component.\n *\n * ### Redirects\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to '/team/11/legacy/user/jim', the router will change the url to\n * '/team/11/user/jim', and then will instantiate the team component with the user component\n * in it.\n *\n * If the `redirectTo` value starts with a '/', then it is an absolute redirect. E.g., if in the\n * example above we change the `redirectTo` to `/user/:name`, the result url will be '/user/jim'.\n *\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any url segments. Let's look at the following configuration:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11`, the router will instantiate the AllUsers component.\n *\n * Empty-path routes can have children.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * When navigating to `/team/11/user/jim`, the router will instantiate the wrapper component with\n * the user component in it.\n *\n * An empty path route inherits its parent's params and data. This is because it cannot have its\n * own params, and, as a result, it often uses its parent's params and data as its own.\n *\n * ### Matching Strategy\n *\n * By default the router will look at what is left in the url, and check if it starts with\n * the specified path (e.g., `/team/11/user` starts with `team/:id`).\n *\n * We can change the matching strategy to make sure that the path covers the whole unconsumed url,\n * which is akin to `unconsumedUrl === path` or `$` regular expressions.\n *\n * This is particularly important when redirecting empty-path routes.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * Since an empty path is a prefix of any url, even when navigating to '/main', the router will\n * still apply the redirect.\n *\n * If `pathMatch: full` is provided, the router will apply the redirect if and only if navigating to\n * '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * It is useful at times to have the ability to share parameters between sibling components.\n *\n * Say we have two components--ChildCmp and AuxCmp--that we want to put next to each other and both\n * of them require some id parameter.\n *\n * One way to do that would be to have a bogus parent component, so both the siblings can get the id\n * parameter from it. This is not ideal. Instead, you can use a componentless route.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * So when navigating to `parent/10/(a//aux:b)`, the route will instantiate the main child and aux\n * child components next to each other. In this example, the application component\n * has to have the primary and aux outlets defined.\n *\n * The router will also merge the `params`, `data`, and `resolve` of the componentless parent into\n * the `params`, `data`, and `resolve` of the children. This is done because there is no component\n * that can inject the activated route of the componentless parent.\n *\n * This is especially useful when child components are defined as follows:\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * With this configuration in place, navigating to '/parent/10' will create the main child and aux\n * components.\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up our application load time by splitting it into multiple bundles, and\n * loading them on demand. The router is designed to make lazy loading simple and easy. Instead of\n * providing the children property, you can provide the `loadChildren` property, as follows:\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   loadChildren: 'team'\n * }]\n * ```\n *\n * The router will use registered NgModuleFactoryLoader to fetch an NgModule associated with 'team'.\n * Then it will extract the set of routes defined in that NgModule, and will transparently add\n * those routes to the main configuration.\n *\n * @stable use Routes\n */\nexport type Routes = Route[];\n\n/**\n * @whatItDoes Represents the results of the URL matching.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @experimental\n */\nexport type UrlMatchResult = {\n  consumed: UrlSegment[]; posParams?: {[name: string]: UrlSegment};\n};\n\n/**\n * @whatItDoes A function matching URLs\n *\n * @description\n *\n * A custom URL matcher can be provided when a combination of `path` and `pathMatch` isn't\n * expressive enough.\n *\n * For instance, the following matcher matches html files.\n *\n * ```\n * function htmlFiles(url: UrlSegment[]) {\n *  return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * const routes = [{ matcher: htmlFiles, component: HtmlCmp }];\n * ```\n *\n * @experimental\n */\nexport type UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) =>\n    UrlMatchResult;\n\n/**\n * @whatItDoes Represents the static data associated with a particular route.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type Data = {\n  [name: string]: any\n};\n\n/**\n * @whatItDoes Represents the resolved data associated with a particular route.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type ResolveData = {\n  [name: string]: any\n};\n\n/**\n * @whatItDoes The type of `loadChildren`.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type LoadChildrenCallback = () =>\n    Type<any>| NgModuleFactory<any>| Promise<Type<any>>| Observable<Type<any>>;\n\n/**\n * @whatItDoes The type of `loadChildren`.\n * See {@link Routes} for more details.\n * @stable\n */\nexport type LoadChildren = string | LoadChildrenCallback;\n\n/**\n * @whatItDoes The type of `queryParamsHandling`.\n * See {@link RouterLink} for more details.\n * @stable\n */\nexport type QueryParamsHandling = 'merge' | 'preserve' | '';\n\n/**\n * @whatItDoes The type of `runGuardsAndResolvers`.\n * See {@link Routes} for more details.\n * @experimental\n */\nexport type RunGuardsAndResolvers = 'paramsChange' | 'paramsOrQueryParamsChange' | 'always';\n\n/**\n * See {@link Routes} for more details.\n * @stable\n */\nexport interface Route {\n  path?: string;\n  pathMatch?: string;\n  matcher?: UrlMatcher;\n  component?: Type<any>;\n  redirectTo?: string;\n  outlet?: string;\n  canActivate?: any[];\n  canActivateChild?: any[];\n  canDeactivate?: any[];\n  canLoad?: any[];\n  data?: Data;\n  resolve?: ResolveData;\n  children?: Routes;\n  loadChildren?: LoadChildren;\n  runGuardsAndResolvers?: RunGuardsAndResolvers;\n}\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\nexport function validateConfig(config: Routes, parentPath: string = ''): void {\n  // forEach doesn't iterate undefined values\n  for (let /** @type {?} */ i = 0; i < config.length; i++) {\n    const /** @type {?} */ route: Route = config[i];\n    const /** @type {?} */ fullPath: string = getFullPath(parentPath, route);\n    validateNode(route, fullPath);\n  }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\nfunction validateNode(route: Route, fullPath: string): void {\n  if (!route) {\n    throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n  }\n  if (Array.isArray(route)) {\n    throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n  }\n  if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': a componentless route cannot have a named outlet set`);\n  }\n  if (route.redirectTo && route.children) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n  }\n  if (route.redirectTo && route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n  }\n  if (route.children && route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n  }\n  if (route.redirectTo && route.component) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\n  }\n  if (route.path && route.matcher) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n  }\n  if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n  }\n  if (route.path === void 0 && route.matcher === void 0) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n  }\n  if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n    throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n  }\n  if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n    const /** @type {?} */ exp =\n        `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n    throw new Error(\n        `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n  }\n  if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath);\n  }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\nfunction getFullPath(parentPath: string, currentRoute: Route): string {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {Route, Routes} from './config';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {PRIMARY_OUTLET, Params, defaultUrlMatcher, navigationCancelingError} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {andObservables, forEach, merge, waitForMap, wrapIntoObservable} from './utils/collection';\nclass NoMatch {\n/**\n * @param {?=} segmentGroup\n */\nconstructor(public segmentGroup: UrlSegmentGroup = null) {}\n}\n\nfunction NoMatch_tsickle_Closure_declarations() {\n/** @type {?} */\nNoMatch.prototype.segmentGroup;\n}\n\nclass AbsoluteRedirect {\n/**\n * @param {?} urlTree\n */\nconstructor(public urlTree: UrlTree) {}\n}\n\nfunction AbsoluteRedirect_tsickle_Closure_declarations() {\n/** @type {?} */\nAbsoluteRedirect.prototype.urlTree;\n}\n\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(navigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nclass ApplyRedirects {\nprivate allowRedirects: boolean = true;\nprivate ngModule: NgModuleRef<any>;\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n */\nconstructor(\n      moduleInjector: Injector,\nprivate configLoader: RouterConfigLoader,\nprivate urlSerializer: UrlSerializer,\nprivate urlTree: UrlTree,\nprivate config: Routes) {\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n/**\n * @return {?}\n */\napply(): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ urlTrees$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(\n                       rootSegmentGroup, this.urlTree.queryParams, this.urlTree.fragment));\n    return _catch.call(urlTrees$, (e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} tree\n * @return {?}\n */\nprivate match(tree: UrlTree): Observable<UrlTree> {\n    const /** @type {?} */ expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    const /** @type {?} */ mapped$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) =>\n                       this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment));\n    return _catch.call(mapped$, (e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n/**\n * @param {?} rootCandidate\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nprivate createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const /** @type {?} */ root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} segmentGroup\n * @param {?} outlet\n * @return {?}\n */\nprivate expandSegmentGroup(\n      ngModule: NgModuleRef<any>, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return map.call(\n          this.expandChildren(ngModule, routes, segmentGroup),\n          (children: any) => new UrlSegmentGroup([], children));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} segmentGroup\n * @return {?}\n */\nprivate expandChildren(\n      ngModule: NgModuleRef<any>, routes: Route[],\n      segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} segments\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\nprivate expandSegment(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[],\n      segments: UrlSegment[], outlet: string,\n      allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ routes$ = of (...routes);\n    const /** @type {?} */ processedRoutes$ = map.call(routes$, (r: any) => {\n      const /** @type {?} */ expanded$ = this.expandSegmentAgainstRoute(\n          ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return _catch.call(expanded$, (e: any) => {\n        if (e instanceof NoMatch) {\n          return of (null);\n        }\n\n        throw e;\n      });\n    });\n    const /** @type {?} */ concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n    const /** @type {?} */ first$ = first.call(concattedProcessedRoutes$, (s: any) => !!s);\n    return _catch.call(first$, (e: any, _: any): Observable<UrlSegmentGroup> => {\n      if (e instanceof EmptyError) {\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of (new UrlSegmentGroup([], {}));\n        }\n\n        throw new NoMatch(segmentGroup);\n      }\n\n      throw e;\n    });\n  }\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} paths\n * @param {?} outlet\n * @param {?} allowRedirects\n * @return {?}\n */\nprivate expandSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects)) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n    }\n\n    return this.expandSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, paths, outlet);\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate expandSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n/**\n * @param {?} ngModule\n * @param {?} routes\n * @param {?} route\n * @param {?} outlet\n * @return {?}\n */\nprivate expandWildCardWithParamsAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const /** @type {?} */ newTree = this.applyRedirectCommands([], route.redirectTo, {});\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      const /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} segmentGroup\n * @param {?} routes\n * @param {?} route\n * @param {?} segments\n * @param {?} outlet\n * @return {?}\n */\nprivate expandRegularSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const /** @type {?} */ newTree = this.applyRedirectCommands(\n        consumedSegments, route.redirectTo, /** @type {?} */(( <any>positionalParamSegments)));\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n      return this.expandSegment(\n          ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} rawSegmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nprivate matchSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return map.call(\n            this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n              ( /** @type {?} */((<any>route)))._loadedConfig = cfg;\n              return new UrlSegmentGroup(segments, {});\n            });\n      }\n\n      return of (new UrlSegmentGroup(segments, {}));\n    }\n\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\n    const /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);\n\n    return mergeMap.call(childConfig$, (routerConfig: LoadedRouterConfig) => {\n      const /** @type {?} */ childModule = routerConfig.module;\n      const /** @type {?} */ childConfig = routerConfig.routes;\n\n      const {segmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        const /** @type {?} */ expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return map.call(\n            expanded$, (children: any) => new UrlSegmentGroup(consumedSegments, children));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of (new UrlSegmentGroup(consumedSegments, {}));\n      }\n\n      const /** @type {?} */ expanded$ = this.expandSegment(\n          childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n      return map.call(\n          expanded$, (cs: UrlSegmentGroup) =>\n                         new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n    });\n  }\n/**\n * @param {?} ngModule\n * @param {?} route\n * @return {?}\n */\nprivate getChildConfig(ngModule: NgModuleRef<any>, route: Route): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of (new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      return mergeMap.call(runGuards(ngModule.injector, route), (shouldLoad: any) => {\n\n        if (shouldLoad) {\n          return ( /** @type {?} */((<any>route)))._loadedConfig ?\n              of (( /** @type {?} */((<any>route)))._loadedConfig) :\n              map.call(\n                  this.configLoader.load(ngModule.injector, route), (cfg: LoadedRouterConfig) => {\n                    ( /** @type {?} */((<any>route)))._loadedConfig = cfg;\n                    return cfg;\n                  });\n        }\n\n        return canLoadFails(route);\n      });\n    }\n\n    return of (new LoadedRouterConfig([], ngModule));\n  }\n/**\n * @param {?} route\n * @param {?} urlTree\n * @return {?}\n */\nprivate lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let /** @type {?} */ res: UrlSegment[] = [];\n    let /** @type {?} */ c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of (res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n/**\n * @param {?} segments\n * @param {?} redirectTo\n * @param {?} posParams\n * @return {?}\n */\nprivate applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} urlTree\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\nprivate applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n/**\n * @param {?} redirectToParams\n * @param {?} actualParams\n * @return {?}\n */\nprivate createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const /** @type {?} */ res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      res[k] = v.startsWith(':') ? actualParams[v.substring(1)] : v;\n    });\n    return res;\n  }\n/**\n * @param {?} redirectTo\n * @param {?} group\n * @param {?} segments\n * @param {?} posParams\n * @return {?}\n */\nprivate createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let /** @type {?} */ children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToSegments\n * @param {?} actualSegments\n * @param {?} posParams\n * @return {?}\n */\nprivate createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n/**\n * @param {?} redirectTo\n * @param {?} redirectToUrlSegment\n * @param {?} posParams\n * @return {?}\n */\nprivate findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n/**\n * @param {?} redirectToUrlSegment\n * @param {?} actualSegments\n * @return {?}\n */\nprivate findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let /** @type {?} */ idx = 0;\n    for (const /** @type {?} */ s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction ApplyRedirects_tsickle_Closure_declarations() {\n/** @type {?} */\nApplyRedirects.prototype.allowRedirects;\n/** @type {?} */\nApplyRedirects.prototype.ngModule;\n/** @type {?} */\nApplyRedirects.prototype.configLoader;\n/** @type {?} */\nApplyRedirects.prototype.urlSerializer;\n/** @type {?} */\nApplyRedirects.prototype.urlTree;\n/** @type {?} */\nApplyRedirects.prototype.config;\n}\n\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @return {?}\n */\nfunction runGuards(moduleInjector: Injector, route: Route): Observable<boolean> {\n  const /** @type {?} */ canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n\n  const /** @type {?} */ obs = map.call(from(canLoad), (c: any) => {\n    const /** @type {?} */ guard = moduleInjector.get(c);\n    return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));\n  });\n\n  return andObservables(obs);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  const /** @type {?} */ noMatch =\n      {matched: false, consumedSegments: /** @type {?} */(( <any[]>[])), lastChild: 0, positionalParamSegments: {}};\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n\n    return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n  }\n\n  const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\n  const /** @type {?} */ res = matcher(segments, segmentGroup, route);\n  if (!res) return noMatch;\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    lastChild: res.consumed.length,\n    positionalParamSegments: res.posParams\n  };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const /** @type {?} */ s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n  }\n\n  return {segmentGroup, slicedSegments};\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const /** @type {?} */ c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  for (const /** @type {?} */ r of routes) {\n    if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return merge(children, res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const /** @type {?} */ res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (const /** @type {?} */ r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathRedirect(segmentGroup, slicedSegments, r)).length > 0;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PRIMARY_OUTLET} from './shared';\nimport {forEach, shallowEqual} from './utils/collection';\n/**\n * @return {?}\n */\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) &&\n        equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) &&\n      containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const /** @type {?} */ c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n  return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(\n    container: {[k: string]: string}, containee: {[k: string]: string}): boolean {\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => containee[key] === container[key]);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    for (const /** @type {?} */ c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n\n  } else {\n    const /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\n    const /** @type {?} */ next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n/**\n * \\@whatItDoes Represents the parsed URL.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n * \n * \\@stable\n */\nexport class UrlTree {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} queryParams\n * @param {?} fragment\n */\nconstructor(\npublic root: UrlSegmentGroup,\npublic queryParams: {[key: string]: string},\npublic fragment: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return new DefaultUrlSerializer().serialize(this); }\n}\n\nfunction UrlTree_tsickle_Closure_declarations() {\n/**\n * The root segment group of the URL tree\n * @type {?}\n */\nUrlTree.prototype.root;\n/**\n * The query params of the URL\n * @type {?}\n */\nUrlTree.prototype.queryParams;\n/**\n * The fragment of the URL\n * @type {?}\n */\nUrlTree.prototype.fragment;\n}\n\n/**\n * \\@whatItDoes Represents the parsed URL segment group.\n * \n * See {\\@link UrlTree} for more information.\n * \n * \\@stable\n */\nexport class UrlSegmentGroup {\n/**\n * \\@internal\n */\n_sourceSegment: UrlSegmentGroup;\n/**\n * \\@internal\n */\n_segmentIndexShift: number;\n  /** The parent node in the url tree */\n  parent: UrlSegmentGroup = null;\n/**\n * @param {?} segments\n * @param {?} children\n */\nconstructor(\npublic segments: UrlSegment[],\npublic children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n/**\n * Wether the segment has child segments\n * @return {?}\n */\nhasChildren(): boolean { return this.numberOfChildren > 0; }\n/**\n * Number of child segments\n * @return {?}\n */\nget numberOfChildren(): number { return Object.keys(this.children).length; }\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePaths(this); }\n}\n\nfunction UrlSegmentGroup_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._sourceSegment;\n/**\n * \\@internal\n * @type {?}\n */\nUrlSegmentGroup.prototype._segmentIndexShift;\n/**\n * The parent node in the url tree\n * @type {?}\n */\nUrlSegmentGroup.prototype.parent;\n/**\n * The URL segments of this group. See {\\@link UrlSegment} for more information\n * @type {?}\n */\nUrlSegmentGroup.prototype.segments;\n/**\n * The list of children of this group\n * @type {?}\n */\nUrlSegmentGroup.prototype.children;\n}\n\n/**\n * \\@whatItDoes Represents a single URL segment.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n * \n * \\@description \n * \n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n * \n * \\@stable\n */\nexport class UrlSegment {\n/**\n * @param {?} path\n * @param {?} parameters\n */\nconstructor(\npublic path: string,\npublic parameters: {[name: string]: string}) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return serializePath(this); }\n}\n\nfunction UrlSegment_tsickle_Closure_declarations() {\n/**\n * The path part of a URL segment\n * @type {?}\n */\nUrlSegment.prototype.path;\n/**\n * The matrix parameters associated with a segment\n * @type {?}\n */\nUrlSegment.prototype.parameters;\n}\n\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalSegments(a: UrlSegment[], b: UrlSegment[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (a[i].path !== b[i].path) return false;\n    if (!shallowEqual(a[i].parameters, b[i].parameters)) return false;\n  }\n  return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalPath(a: UrlSegment[], b: UrlSegment[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (a[i].path !== b[i].path) return false;\n  }\n  return true;\n}\n/**\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let /** @type {?} */ res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\n * \n * \\@description The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n * \n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class UrlSerializer {\n/**\n * Parse a url into a {\\@link UrlTree}\n * @abstract\n * @param {?} url\n * @return {?}\n */\nparse(url: string) {}\n/**\n * Converts a {\\@link UrlTree} into a url\n * @abstract\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree) {}\n}\n/**\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\n * \n * \\@description \n * \n * Example URLs:\n * \n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n * \n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n * \n * \\@stable\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n/**\n * Parses a url into a {\\@link UrlTree}\n * @param {?} url\n * @return {?}\n */\nparse(url: string): UrlTree {\n    const /** @type {?} */ p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n/**\n * Converts a {\\@link UrlTree} into a url\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree): string {\n    const /** @type {?} */ segment = `/${serializeSegment(tree.root, true)}`;\n    const /** @type {?} */ query = serializeQueryParams(tree.queryParams);\n    const /** @type {?} */ fragment =\n        tree.fragment !== null && tree.fragment !== undefined ? `#${encodeURI(tree.fragment)}` : '';\n    return `${segment}${query}${fragment}`;\n  }\n}\n/**\n * @param {?} segment\n * @return {?}\n */\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (segment.hasChildren() && root) {\n    const /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const /** @type {?} */ children: string[] = [];\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n    if (children.length > 0) {\n      return `${primary}(${children.join('//')})`;\n    } else {\n      return `${primary}`;\n    }\n\n  } else if (segment.hasChildren() && !root) {\n    const /** @type {?} */ children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      } else {\n        return [`${k}:${serializeSegment(v, false)}`];\n      }\n    });\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n\n  } else {\n    return serializePaths(segment);\n  }\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function encode(s: string): string {\n  return encodeURIComponent(s);\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n/**\n * @param {?} path\n * @return {?}\n */\nexport function serializePath(path: UrlSegment): string {\n  return `${encode(path.path)}${serializeParams(path.parameters)}`;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeParams(params: {[key: string]: string}): string {\n  return pairs(params).map(p => `;${encode(p.first)}=${encode(p.second)}`).join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const /** @type {?} */ strParams: string[] = Object.keys(params).map((name) => {\n    const /** @type {?} */ value = params[name];\n    return Array.isArray(value) ? value.map(v => `${encode(name)}=${encode(v)}`).join('&') :\n                                  `${encode(name)}=${encode(value)}`;\n  });\n\n  return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\nclass Pair<A, B> {\n/**\n * @param {?} first\n * @param {?} second\n */\nconstructor(public first: A,\npublic second: B) {}\n}\n\nfunction Pair_tsickle_Closure_declarations() {\n/** @type {?} */\nPair.prototype.first;\n/** @type {?} */\nPair.prototype.second;\n}\n\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction pairs<T>(obj: {[key: string]: T}): Pair<string, T>[] {\n  const /** @type {?} */ res: Pair<string, T>[] = [];\n  for (const /** @type {?} */ prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      res.push(new Pair<string, T>(prop, obj[prop]));\n    }\n  }\n  return res;\n}\n\nconst /** @type {?} */ SEGMENT_RE = /^[^\\/()?;=&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str: string): string {\n  SEGMENT_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_RE = /^[^=?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str: string): string {\n  QUERY_PARAM_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst /** @type {?} */ QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str: string): string {\n  QUERY_PARAM_VALUE_RE.lastIndex = 0;\n  const /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\nclass UrlParser {\nprivate remaining: string;\n/**\n * @param {?} url\n */\nconstructor(private url: string) { this.remaining = url; }\n/**\n * @param {?} str\n * @return {?}\n */\npeekStartsWith(str: string): boolean { return this.remaining.startsWith(str); }\n/**\n * @param {?} str\n * @return {?}\n */\ncapture(str: string): void {\n    if (!this.remaining.startsWith(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n    this.remaining = this.remaining.substring(str.length);\n  }\n/**\n * @return {?}\n */\nparseRootSegment(): UrlSegmentGroup {\n    if (this.remaining.startsWith('/')) {\n      this.capture('/');\n    }\n\n    if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n/**\n * @return {?}\n */\nparseChildren(): {[key: string]: UrlSegmentGroup} {\n    if (this.remaining.length == 0) {\n      return {};\n    }\n\n    if (this.peekStartsWith('/')) {\n      this.capture('/');\n    }\n\n    const /** @type {?} */ paths: any[] = [];\n    if (!this.peekStartsWith('(')) {\n      paths.push(this.parseSegments());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      paths.push(this.parseSegments());\n    }\n\n    let /** @type {?} */ children: {[key: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let /** @type {?} */ res: {[key: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (paths.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);\n    }\n\n    return res;\n  }\n/**\n * @return {?}\n */\nparseSegments(): UrlSegment {\n    const /** @type {?} */ path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    let /** @type {?} */ matrixParams: {[key: string]: any} = {};\n    if (this.peekStartsWith(';')) {\n      matrixParams = this.parseMatrixParams();\n    }\n    return new UrlSegment(decode(path), matrixParams);\n  }\n/**\n * @return {?}\n */\nparseQueryParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    if (this.peekStartsWith('?')) {\n      this.capture('?');\n      this.parseQueryParam(params);\n      while (this.remaining.length > 0 && this.peekStartsWith('&')) {\n        this.capture('&');\n        this.parseQueryParam(params);\n      }\n    }\n    return params;\n  }\n/**\n * @return {?}\n */\nparseFragment(): string {\n    if (this.peekStartsWith('#')) {\n      return decodeURI(this.remaining.substring(1));\n    }\n\n    return null;\n  }\n/**\n * @return {?}\n */\nparseMatrixParams(): {[key: string]: any} {\n    const /** @type {?} */ params: {[key: string]: any} = {};\n    while (this.remaining.length > 0 && this.peekStartsWith(';')) {\n      this.capture(';');\n      this.parseParam(params);\n    }\n    return params;\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nparseParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.peekStartsWith('=')) {\n      this.capture('=');\n      const /** @type {?} */ valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nparseQueryParam(params: {[key: string]: any}): void {\n    const /** @type {?} */ key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let /** @type {?} */ value: any = '';\n    if (this.peekStartsWith('=')) {\n      this.capture('=');\n      const /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const /** @type {?} */ decodedKey = decode(key);\n    const /** @type {?} */ decodedVal = decode(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let /** @type {?} */ currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n/**\n * @param {?} allowPrimary\n * @return {?}\n */\nparseParens(allowPrimary: boolean): {[key: string]: UrlSegmentGroup} {\n    const /** @type {?} */ segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n    while (!this.peekStartsWith(')') && this.remaining.length > 0) {\n      const /** @type {?} */ path = matchSegments(this.remaining);\n\n      const /** @type {?} */ next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let /** @type {?} */ outletName: string;\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const /** @type {?} */ children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      if (this.peekStartsWith('//')) {\n        this.capture('//');\n      }\n    }\n    this.capture(')');\n    return segments;\n  }\n}\n\nfunction UrlParser_tsickle_Closure_declarations() {\n/** @type {?} */\nUrlParser.prototype.remaining;\n/** @type {?} */\nUrlParser.prototype.url;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, InjectionToken, Injector, NgModuleFactory, NgModuleFactoryLoader, NgModuleRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {of } from 'rxjs/observable/of';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {LoadChildren, Route} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\n\n/**\n * @docsNotRequired\n * @experimental\n */\nexport const /** @type {?} */ ROUTES = new InjectionToken<Route[][]>('ROUTES');\nexport class LoadedRouterConfig {\n/**\n * @param {?} routes\n * @param {?} module\n */\nconstructor(public routes: Route[],\npublic module: NgModuleRef<any>) {}\n}\n\nfunction LoadedRouterConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadedRouterConfig.prototype.routes;\n/** @type {?} */\nLoadedRouterConfig.prototype.module;\n}\n\nexport class RouterConfigLoader {\n/**\n * @param {?} loader\n * @param {?} compiler\n * @param {?=} onLoadStartListener\n * @param {?=} onLoadEndListener\n */\nconstructor(\nprivate loader: NgModuleFactoryLoader,\nprivate compiler: Compiler,\nprivate onLoadStartListener?: (r: Route) => void,\nprivate onLoadEndListener?: (r: Route) => void) {}\n/**\n * @param {?} parentInjector\n * @param {?} route\n * @return {?}\n */\nload(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n\n    const /** @type {?} */ moduleFactory$ = this.loadModuleFactory(route.loadChildren);\n\n    return map.call(moduleFactory$, (factory: NgModuleFactory<any>) => {\n      if (this.onLoadEndListener) {\n        this.onLoadEndListener(route);\n      }\n\n      const /** @type {?} */ module = factory.create(parentInjector);\n\n      return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)), module);\n    });\n  }\n/**\n * @param {?} loadChildren\n * @return {?}\n */\nprivate loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return fromPromise(this.loader.load(loadChildren));\n    } else {\n      return mergeMap.call(wrapIntoObservable(loadChildren()), (t: any) => {\n        if (t instanceof NgModuleFactory) {\n          return of (t);\n        } else {\n          return fromPromise(this.compiler.compileModuleAsync(t));\n        }\n      });\n    }\n  }\n}\n\nfunction RouterConfigLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterConfigLoader.prototype.loader;\n/** @type {?} */\nRouterConfigLoader.prototype.compiler;\n/** @type {?} */\nRouterConfigLoader.prototype.onLoadStartListener;\n/** @type {?} */\nRouterConfigLoader.prototype.onLoadEndListener;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory, ÉµisObservable as isObservable, ÉµisPromise as isPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {of } from 'rxjs/observable/of';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {every} from 'rxjs/operator/every';\nimport * as l from 'rxjs/operator/last';\nimport {map} from 'rxjs/operator/map';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {PRIMARY_OUTLET} from '../shared';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqualArrays(a: any[], b: any[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function shallowEqual(a: {[x: string]: any}, b: {[x: string]: any}): boolean {\n  const /** @type {?} */ k1 = Object.keys(a);\n  const /** @type {?} */ k2 = Object.keys(b);\n  if (k1.length != k2.length) {\n    return false;\n  }\n  let /** @type {?} */ key: string;\n  for (let /** @type {?} */ i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * @param {?} a\n * @return {?}\n */\nexport function flatten<T>(a: T[][]): T[] {\n  const /** @type {?} */ target: T[] = [];\n  for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n    for (let /** @type {?} */ j = 0; j < a[i].length; ++j) {\n      target.push(a[i][j]);\n    }\n  }\n  return target;\n}\n/**\n * @param {?} a\n * @return {?}\n */\nexport function first<T>(a: T[]): T {\n  return a.length > 0 ? a[0] : null;\n}\n/**\n * @param {?} a\n * @return {?}\n */\nexport function last<T>(a: T[]): T {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * @param {?} bools\n * @return {?}\n */\nexport function and(bools: boolean[]): boolean {\n  return !bools.some(v => !v);\n}\n/**\n * @param {?} m1\n * @param {?} m2\n * @return {?}\n */\nexport function merge<V>(m1: {[key: string]: V}, m2: {[key: string]: V}): {[key: string]: V} {\n  const /** @type {?} */ m: {[key: string]: V} = {};\n\n  for (const /** @type {?} */ attr in m1) {\n    if (m1.hasOwnProperty(attr)) {\n      m[attr] = m1[attr];\n    }\n  }\n\n  for (const /** @type {?} */ attr in m2) {\n    if (m2.hasOwnProperty(attr)) {\n      m[attr] = m2[attr];\n    }\n  }\n\n  return m;\n}\n/**\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\nexport function forEach<K, V>(map: {[key: string]: V}, callback: (v: V, k: string) => void): void {\n  for (const /** @type {?} */ prop in map) {\n    if (map.hasOwnProperty(prop)) {\n      callback(map[prop], prop);\n    }\n  }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function waitForMap<A, B>(\n    obj: {[k: string]: A}, fn: (k: string, a: A) => Observable<B>): Observable<{[k: string]: B}> {\n  const /** @type {?} */ waitFor: Observable<B>[] = [];\n  const /** @type {?} */ res: {[k: string]: B} = {};\n\n  forEach(obj, (a: A, k: string) => {\n    if (k === PRIMARY_OUTLET) {\n      waitFor.push(map.call(fn(k, a), (_: B) => {\n        res[k] = _;\n        return _;\n      }));\n    }\n  });\n\n  forEach(obj, (a: A, k: string) => {\n    if (k !== PRIMARY_OUTLET) {\n      waitFor.push(map.call(fn(k, a), (_: B) => {\n        res[k] = _;\n        return _;\n      }));\n    }\n  });\n\n  if (waitFor.length > 0) {\n    const /** @type {?} */ concatted$ = concatAll.call(of (...waitFor));\n    const /** @type {?} */ last$ = l.last.call(concatted$);\n    return map.call(last$, () => res);\n  }\n\n  return of (res);\n}\n/**\n * @param {?} observables\n * @return {?}\n */\nexport function andObservables(observables: Observable<Observable<any>>): Observable<boolean> {\n  const /** @type {?} */ merged$ = mergeAll.call(observables);\n  return every.call(merged$, (result: any) => result === true);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function wrapIntoObservable<T>(value: T | NgModuleFactory<T>| Promise<T>| Observable<T>):\n    Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return fromPromise(value);\n  }\n\n  return of (value);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Route, UrlMatchResult} from './config';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * @whatItDoes Name of the primary outlet.\n *\n * @stable\n */\nexport const /** @type {?} */ PRIMARY_OUTLET = 'primary';\n\n/**\n * A collection of parameters.\n *\n * @stable\n */\nexport type Params = {\n  [key: string]: any\n};\n\nconst /** @type {?} */ NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function navigationCancelingError(message: string) {\n  const /** @type {?} */ error = Error('NavigationCancelingError: ' + message);\n  ( /** @type {?} */((error as any)))[NAVIGATION_CANCELING_ERROR] = true;\n  return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isNavigationCancelingError(error: Error) {\n  return ( /** @type {?} */((error as any)))[NAVIGATION_CANCELING_ERROR];\n}\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nexport function defaultUrlMatcher(\n    segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult {\n  const /** @type {?} */ path = route.path;\n  const /** @type {?} */ parts = path.split('/');\n  const /** @type {?} */ posParams: {[key: string]: UrlSegment} = {};\n  const /** @type {?} */ consumed: UrlSegment[] = [];\n\n  let /** @type {?} */ currentIndex = 0;\n\n  for (let /** @type {?} */ i = 0; i < parts.length; ++i) {\n    if (currentIndex >= segments.length) return null;\n    const /** @type {?} */ current = segments[currentIndex];\n\n    const /** @type {?} */ p = parts[i];\n    const /** @type {?} */ isPosParam = p.startsWith(':');\n\n    if (!isPosParam && p !== current.path) return null;\n    if (isPosParam) {\n      posParams[p.substring(1)] = current;\n    }\n    consumed.push(current);\n    currentIndex++;\n  }\n\n  if (route.pathMatch === 'full' &&\n      (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n    return null;\n  } else {\n    return {consumed, posParams};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from './config';\nimport {RouterStateSnapshot} from './router_state';\n/**\n * \\@whatItDoes Represents an event triggered when a navigation starts.\n * \n * \\@stable\n */\nexport class NavigationStart {\n/**\n * @param {?} id\n * @param {?} url\n */\nconstructor(\npublic id: number,\npublic url: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n\nfunction NavigationStart_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationStart.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationStart.prototype.url;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\n * \n * \\@stable\n */\nexport class NavigationEnd {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n */\nconstructor(\npublic id: number,\npublic url: string,\npublic urlAfterRedirects: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\nfunction NavigationEnd_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationEnd.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationEnd.prototype.url;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationEnd.prototype.urlAfterRedirects;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\n * \n * \\@stable\n */\nexport class NavigationCancel {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} reason\n */\nconstructor(\npublic id: number,\npublic url: string,\npublic reason: string) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n\nfunction NavigationCancel_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationCancel.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationCancel.prototype.url;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationCancel.prototype.reason;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\n * \n * \\@stable\n */\nexport class NavigationError {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} error\n */\nconstructor(\npublic id: number,\npublic url: string,\npublic error: any) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\nfunction NavigationError_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationError.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationError.prototype.url;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nNavigationError.prototype.error;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when routes are recognized.\n * \n * \\@stable\n */\nexport class RoutesRecognized {\n/**\n * @param {?} id\n * @param {?} url\n * @param {?} urlAfterRedirects\n * @param {?} state\n */\nconstructor(\npublic id: number,\npublic url: string,\npublic urlAfterRedirects: string,\npublic state: RouterStateSnapshot) {}\n/**\n * \\@docsNotRequired\n * @return {?}\n */\ntoString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\nfunction RoutesRecognized_tsickle_Closure_declarations() {\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.id;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.url;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.urlAfterRedirects;\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nRoutesRecognized.prototype.state;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\n * \n * \\@experimental\n */\nexport class RouteConfigLoadStart {\n/**\n * @param {?} route\n */\nconstructor(public route: Route) {}\n/**\n * @return {?}\n */\ntoString(): string { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\n\nfunction RouteConfigLoadStart_tsickle_Closure_declarations() {\n/** @type {?} */\nRouteConfigLoadStart.prototype.route;\n}\n\n/**\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\n * \n * \\@experimental\n */\nexport class RouteConfigLoadEnd {\n/**\n * @param {?} route\n */\nconstructor(public route: Route) {}\n/**\n * @return {?}\n */\ntoString(): string { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\n\nfunction RouteConfigLoadEnd_tsickle_Closure_declarations() {\n/** @type {?} */\nRouteConfigLoadEnd.prototype.route;\n}\n\n\n/**\n * @whatItDoes Represents a router event.\n *\n * One of:\n * - {@link NavigationStart},\n * - {@link NavigationEnd},\n * - {@link NavigationCancel},\n * - {@link NavigationError},\n * - {@link RoutesRecognized},\n * - {@link RouteConfigLoadStart},\n * - {@link RouteConfigLoadEnd}\n *\n * @stable\n */\nexport type Event = NavigationStart | NavigationEnd | NavigationCancel | NavigationError |\n    RoutesRecognized | RouteConfigLoadStart | RouteConfigLoadEnd;\n"],"names":["getDOM","getOutlet","split","NoMatch","match","isPromise","isObservable"],"mappings":"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"}