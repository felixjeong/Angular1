{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/interfaces.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\n\n/**\n * An interface a class can implement to be a guard deciding if a route can be activated.\n *\n * @experimental\n */\nexport interface CanActivate {\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n      Observable<boolean>|boolean;\n}\n\n/**\n * An interface a class can implement to be a guard deciding if a route can be deactivated.\n *\n * @experimental\n */\nexport interface CanDeactivate<T> {\n  canDeactivate(component: T, route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n      Observable<boolean>|boolean;\n}\n\n/**\n * @experimental\n */\nexport interface Resolve<T> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any>|any;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}