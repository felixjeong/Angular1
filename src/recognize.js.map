{"version":3,"file":"recognize.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/recognize.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {of } from 'rxjs/observable/of';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, InheritedResolve, RouterStateSnapshot} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {last, merge} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\nclass NoMatch {\n  constructor(public segmentGroup: UrlSegmentGroup = null) {}\n}\n\nclass InheritedFromParent {\n  constructor(\n      public parent: InheritedFromParent, public snapshot: ActivatedRouteSnapshot,\n      public params: Params, public data: Data, public resolve: InheritedResolve) {}\n\n  get allParams(): Params {\n    return this.parent ? merge(this.parent.allParams, this.params) : this.params;\n  }\n\n  get allData(): Data { return this.parent ? merge(this.parent.allData, this.data) : this.data; }\n\n  static empty(snapshot: ActivatedRouteSnapshot): InheritedFromParent {\n    return new InheritedFromParent(null, snapshot, {}, {}, new InheritedResolve(null, {}));\n  }\n}\n\nexport function recognize(rootComponentType: Type, config: Routes, urlTree: UrlTree, url: string):\n    Observable<RouterStateSnapshot> {\n  try {\n    const rootSegmentGroup = split(urlTree.root, [], [], config).segmentGroup;\n    const children = processSegmentGroup(\n        config, rootSegmentGroup, InheritedFromParent.empty(null), PRIMARY_OUTLET);\n    const root = new ActivatedRouteSnapshot(\n        [], Object.freeze({}), {}, PRIMARY_OUTLET, rootComponentType, null, urlTree.root, -1,\n        InheritedResolve.empty);\n    const rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n    return of (new RouterStateSnapshot(\n        url, rootNode, Object.freeze(urlTree.queryParams), urlTree.fragment));\n  } catch (e) {\n    if (e instanceof NoMatch) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) =>\n              obs.error(new Error(`Cannot match any routes: '${e.segmentGroup}'`)));\n    } else {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n}\n\nfunction processSegmentGroup(\n    config: Route[], segmentGroup: UrlSegmentGroup, inherited: InheritedFromParent,\n    outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return processChildren(config, segmentGroup, inherited);\n  } else {\n    return processSegment(config, segmentGroup, 0, segmentGroup.segments, inherited, outlet);\n  }\n}\n\nfunction processChildren(\n    config: Route[], segmentGroup: UrlSegmentGroup,\n    inherited: InheritedFromParent): TreeNode<ActivatedRouteSnapshot>[] {\n  const children = mapChildrenIntoArray(\n      segmentGroup,\n      (child, childOutlet) => processSegmentGroup(config, child, inherited, childOutlet));\n  checkOutletNameUniqueness(children);\n  sortActivatedRouteSnapshots(children);\n  return children;\n}\n\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n\nfunction processSegment(\n    config: Route[], segmentGroup: UrlSegmentGroup, pathIndex: number, segments: UrlSegment[],\n    inherited: InheritedFromParent, outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n  for (let r of config) {\n    try {\n      return processSegmentAgainstRoute(r, segmentGroup, pathIndex, segments, inherited, outlet);\n    } catch (e) {\n      if (!(e instanceof NoMatch)) throw e;\n    }\n  }\n  throw new NoMatch(segmentGroup);\n}\n\nfunction processSegmentAgainstRoute(\n    route: Route, rawSegment: UrlSegmentGroup, pathIndex: number, segments: UrlSegment[],\n    inherited: InheritedFromParent, outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n  if (route.redirectTo) throw new NoMatch();\n\n  if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n  const newInheritedResolve = new InheritedResolve(inherited.resolve, getResolve(route));\n\n  if (route.path === '**') {\n    const params = segments.length > 0 ? last(segments).parameters : {};\n    const snapshot = new ActivatedRouteSnapshot(\n        segments, Object.freeze(merge(inherited.allParams, params)),\n        merge(inherited.allData, getData(route)), outlet, route.component, route,\n        getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length,\n        newInheritedResolve);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n  }\n\n  const {consumedSegments, parameters, lastChild} =\n      match(rawSegment, route, segments, inherited.snapshot);\n  const rawSlicedSegments = segments.slice(lastChild);\n  const childConfig = getChildConfig(route);\n\n  const {segmentGroup, slicedSegments} =\n      split(rawSegment, consumedSegments, rawSlicedSegments, childConfig);\n\n  const snapshot = new ActivatedRouteSnapshot(\n      consumedSegments, Object.freeze(merge(inherited.allParams, parameters)),\n      merge(inherited.allData, getData(route)), outlet, route.component, route,\n      getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length,\n      newInheritedResolve);\n\n  const newInherited = route.component ?\n      InheritedFromParent.empty(snapshot) :\n      new InheritedFromParent(inherited, snapshot, parameters, getData(route), newInheritedResolve);\n\n  if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n    const children = processChildren(childConfig, segmentGroup, newInherited);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n\n  } else if (childConfig.length === 0 && slicedSegments.length === 0) {\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n\n  } else {\n    const children = processSegment(\n        childConfig, segmentGroup, pathIndex + lastChild, slicedSegments, newInherited,\n        PRIMARY_OUTLET);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n  }\n}\n\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  } else if (route.loadChildren) {\n    return (<any>route)._loadedConfig.routes;\n  } else {\n    return [];\n  }\n}\n\nfunction match(\n    segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[],\n    parent: ActivatedRouteSnapshot) {\n  if (route.path === '') {\n    if ((route.terminal || route.pathMatch === 'full') &&\n        (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch();\n    } else {\n      const params = parent ? parent.params : {};\n      return {consumedSegments: [], lastChild: 0, parameters: params};\n    }\n  }\n\n  const path = route.path;\n  const parts = path.split('/');\n  const posParameters: {[key: string]: any} = {};\n  const consumedSegments: UrlSegment[] = [];\n\n  let currentIndex = 0;\n\n  for (let i = 0; i < parts.length; ++i) {\n    if (currentIndex >= segments.length) throw new NoMatch();\n    const current = segments[currentIndex];\n\n    const p = parts[i];\n    const isPosParam = p.startsWith(':');\n\n    if (!isPosParam && p !== current.path) throw new NoMatch();\n    if (isPosParam) {\n      posParameters[p.substring(1)] = current.path;\n    }\n    consumedSegments.push(current);\n    currentIndex++;\n  }\n\n  if ((route.terminal || route.pathMatch === 'full') &&\n      (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n    throw new NoMatch();\n  }\n\n  const parameters = merge(posParameters, consumedSegments[consumedSegments.length - 1].parameters);\n  return {consumedSegments, lastChild: currentIndex, parameters};\n}\n\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    let routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let s = segmentGroup;\n  let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptyPaths(\n                              segmentGroup, consumedSegments, config,\n                              new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n\n  } else if (\n      slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n\n  } else {\n    const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n}\n\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (let r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = segmentGroup.segments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return merge(children, res);\n}\n\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (let r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathMatch(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathMatch(segmentGroup, slicedSegments, r)).length > 0;\n}\n\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) &&\n      (r.terminal || r.pathMatch === 'full'))\n    return false;\n  return r.path === '' && r.redirectTo === undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\n\nfunction getData(route: Route): Data {\n  return route.data ? route.data : {};\n}\n\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve ? route.resolve : {};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}