{"version":3,"file":"apply_redirects.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/apply_redirects.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/concatAll';\n\nimport {Injector} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {Route, Routes} from './config';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {andObservables, merge, waitForMap, wrapIntoObservable} from './utils/collection';\n\nclass NoMatch {\n  constructor(public segmentGroup: UrlSegmentGroup = null) {}\n}\n\nclass AbsoluteRedirect {\n  constructor(public segments: UrlSegment[]) {}\n}\n\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n\nfunction absoluteRedirect(segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(segments)));\n}\n\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(new Error(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n\n\nexport function applyRedirects(\n    injector: Injector, configLoader: RouterConfigLoader, urlTree: UrlTree,\n    config: Routes): Observable<UrlTree> {\n  return expandSegmentGroup(injector, configLoader, config, urlTree.root, PRIMARY_OUTLET)\n      .map(rootSegmentGroup => createUrlTree(urlTree, rootSegmentGroup))\n      .catch(e => {\n        if (e instanceof AbsoluteRedirect) {\n          return of (createUrlTree(\n              urlTree,\n              new UrlSegmentGroup([], {[PRIMARY_OUTLET]: new UrlSegmentGroup(e.segments, {})})));\n        } else if (e instanceof NoMatch) {\n          throw new Error(`Cannot match any routes: '${e.segmentGroup}'`);\n        } else {\n          throw e;\n        }\n      });\n}\n\nfunction createUrlTree(urlTree: UrlTree, rootCandidate: UrlSegmentGroup): UrlTree {\n  const root = rootCandidate.segments.length > 0 ?\n      new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n      rootCandidate;\n  return new UrlTree(root, urlTree.queryParams, urlTree.fragment);\n}\n\nfunction expandSegmentGroup(\n    injector: Injector, configLoader: RouterConfigLoader, routes: Route[],\n    segmentGroup: UrlSegmentGroup, outlet: string): Observable<UrlSegmentGroup> {\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return expandChildren(injector, configLoader, routes, segmentGroup)\n        .map(children => new UrlSegmentGroup([], children));\n  } else {\n    return expandSegment(\n        injector, configLoader, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n}\n\nfunction expandChildren(\n    injector: Injector, configLoader: RouterConfigLoader, routes: Route[],\n    segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n  return waitForMap(\n      segmentGroup.children, (childOutlet, child) => expandSegmentGroup(\n                                 injector, configLoader, routes, child, childOutlet));\n}\n\nfunction expandSegment(\n    injector: Injector, configLoader: RouterConfigLoader, segmentGroup: UrlSegmentGroup,\n    routes: Route[], segments: UrlSegment[], outlet: string,\n    allowRedirects: boolean): Observable<UrlSegmentGroup> {\n  const processRoutes = of (...routes)\n                            .map(r => {\n                              return expandSegmentAgainstRoute(\n                                         injector, configLoader, segmentGroup, routes, r, segments,\n                                         outlet, allowRedirects)\n                                  .catch((e) => {\n                                    if (e instanceof NoMatch)\n                                      return of (null);\n                                    else\n                                      throw e;\n                                  });\n                            })\n                            .concatAll();\n\n  return processRoutes.first(s => !!s).catch((e: any, _: any): Observable<UrlSegmentGroup> => {\n    if (e instanceof EmptyError) {\n      throw new NoMatch(segmentGroup);\n    } else {\n      throw e;\n    }\n  });\n}\n\nfunction expandSegmentAgainstRoute(\n    injector: Injector, configLoader: RouterConfigLoader, segmentGroup: UrlSegmentGroup,\n    routes: Route[], route: Route, paths: UrlSegment[], outlet: string,\n    allowRedirects: boolean): Observable<UrlSegmentGroup> {\n  if (getOutlet(route) !== outlet) return noMatch(segmentGroup);\n  if (route.redirectTo !== undefined && !allowRedirects) return noMatch(segmentGroup);\n\n  if (route.redirectTo !== undefined) {\n    return expandSegmentAgainstRouteUsingRedirect(\n        injector, configLoader, segmentGroup, routes, route, paths, outlet);\n  } else {\n    return matchSegmentAgainstRoute(injector, configLoader, segmentGroup, route, paths);\n  }\n}\n\nfunction expandSegmentAgainstRouteUsingRedirect(\n    injector: Injector, configLoader: RouterConfigLoader, segmentGroup: UrlSegmentGroup,\n    routes: Route[], route: Route, segments: UrlSegment[],\n    outlet: string): Observable<UrlSegmentGroup> {\n  if (route.path === '**') {\n    return expandWildCardWithParamsAgainstRouteUsingRedirect(route);\n  } else {\n    return expandRegularSegmentAgainstRouteUsingRedirect(\n        injector, configLoader, segmentGroup, routes, route, segments, outlet);\n  }\n}\n\nfunction expandWildCardWithParamsAgainstRouteUsingRedirect(route: Route):\n    Observable<UrlSegmentGroup> {\n  const newSegments = applyRedirectCommands([], route.redirectTo, {});\n  if (route.redirectTo.startsWith('/')) {\n    return absoluteRedirect(newSegments);\n  } else {\n    return of (new UrlSegmentGroup(newSegments, {}));\n  }\n}\n\nfunction expandRegularSegmentAgainstRouteUsingRedirect(\n    injector: Injector, configLoader: RouterConfigLoader, segmentGroup: UrlSegmentGroup,\n    routes: Route[], route: Route, segments: UrlSegment[],\n    outlet: string): Observable<UrlSegmentGroup> {\n  const {matched, consumedSegments, lastChild, positionalParamSegments} =\n      match(segmentGroup, route, segments);\n  if (!matched) return noMatch(segmentGroup);\n\n  const newSegments =\n      applyRedirectCommands(consumedSegments, route.redirectTo, <any>positionalParamSegments);\n  if (route.redirectTo.startsWith('/')) {\n    return absoluteRedirect(newSegments);\n  } else {\n    return expandSegment(\n        injector, configLoader, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)),\n        outlet, false);\n  }\n}\n\nfunction matchSegmentAgainstRoute(\n    injector: Injector, configLoader: RouterConfigLoader, rawSegmentGroup: UrlSegmentGroup,\n    route: Route, segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n  if (route.path === '**') {\n    return of (new UrlSegmentGroup(segments, {}));\n\n  } else {\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const rawSlicedSegments = segments.slice(lastChild);\n\n    return getChildConfig(injector, configLoader, route).mergeMap(routerConfig => {\n      const childInjector = routerConfig.injector;\n      const childConfig = routerConfig.routes;\n      const {segmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        return expandChildren(childInjector, configLoader, childConfig, segmentGroup)\n            .map(children => new UrlSegmentGroup(consumedSegments, children));\n\n      } else if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of (new UrlSegmentGroup(consumedSegments, {}));\n\n      } else {\n        return expandSegment(\n                   childInjector, configLoader, segmentGroup, childConfig, slicedSegments,\n                   PRIMARY_OUTLET, true)\n            .map(cs => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n      }\n    });\n  }\n}\n\nfunction getChildConfig(injector: Injector, configLoader: RouterConfigLoader, route: Route):\n    Observable<LoadedRouterConfig> {\n  if (route.children) {\n    return of (new LoadedRouterConfig(route.children, injector, null));\n  } else if (route.loadChildren) {\n    return runGuards(injector, route).mergeMap(shouldLoad => {\n      if (shouldLoad) {\n        return configLoader.load(injector, route.loadChildren).map(r => {\n          (<any>route)._loadedConfig = r;\n          return r;\n        });\n      } else {\n        return canLoadFails(route);\n      }\n    });\n  } else {\n    return of (new LoadedRouterConfig([], injector, null));\n  }\n}\n\nfunction runGuards(injector: Injector, route: Route): Observable<boolean> {\n  const canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n  const obs = from(canLoad).map(c => {\n    const guard = injector.get(c);\n    if (guard.canLoad) {\n      return wrapIntoObservable(guard.canLoad(route));\n    } else {\n      return wrapIntoObservable(guard(route));\n    }\n  });\n  return andObservables(obs);\n}\n\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  const noMatch =\n      {matched: false, consumedSegments: <any[]>[], lastChild: 0, positionalParamSegments: {}};\n  if (route.path === '') {\n    if ((route.terminal || route.pathMatch === 'full') &&\n        (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    } else {\n      return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n  }\n\n  const path = route.path;\n  const parts = path.split('/');\n  const positionalParamSegments: {[k: string]: UrlSegment} = {};\n  const consumedSegments: UrlSegment[] = [];\n\n  let currentIndex = 0;\n\n  for (let i = 0; i < parts.length; ++i) {\n    if (currentIndex >= segments.length) return noMatch;\n    const current = segments[currentIndex];\n\n    const p = parts[i];\n    const isPosParam = p.startsWith(':');\n\n    if (!isPosParam && p !== current.path) return noMatch;\n    if (isPosParam) {\n      positionalParamSegments[p.substring(1)] = current;\n    }\n    consumedSegments.push(current);\n    currentIndex++;\n  }\n\n  if (route.terminal && (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n    return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n  }\n\n  return {matched: true, consumedSegments, lastChild: currentIndex, positionalParamSegments};\n}\n\nfunction applyRedirectCommands(\n    segments: UrlSegment[], redirectTo: string,\n    posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n  const r = redirectTo.startsWith('/') ? redirectTo.substring(1) : redirectTo;\n  if (r === '') {\n    return [];\n  } else {\n    return createSegments(redirectTo, r.split('/'), segments, posParams);\n  }\n}\n\nfunction createSegments(\n    redirectTo: string, parts: string[], segments: UrlSegment[],\n    posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n  return parts.map(\n      p => p.startsWith(':') ? findPosParam(p, posParams, redirectTo) :\n                               findOrCreateSegment(p, segments));\n}\n\nfunction findPosParam(\n    part: string, posParams: {[k: string]: UrlSegment}, redirectTo: string): UrlSegment {\n  const paramName = part.substring(1);\n  const pos = posParams[paramName];\n  if (!pos) throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${part}'.`);\n  return pos;\n}\n\nfunction findOrCreateSegment(part: string, segments: UrlSegment[]): UrlSegment {\n  let idx = 0;\n  for (const s of segments) {\n    if (s.path === part) {\n      segments.splice(idx);\n      return s;\n    }\n    idx++;\n  }\n  return new UrlSegment(part, {});\n}\n\n\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n\n  } else if (\n      slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n\n  } else {\n    return {segmentGroup, slicedSegments};\n  }\n}\n\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  } else {\n    return s;\n  }\n}\n\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (let r of routes) {\n    if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return merge(children, res);\n}\n\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (let r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathRedirect(segmentGroup, slicedSegments, r)).length > 0;\n}\n\nfunction emptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) &&\n      (r.terminal || r.pathMatch === 'full'))\n    return false;\n  return r.path === '' && r.redirectTo !== undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}